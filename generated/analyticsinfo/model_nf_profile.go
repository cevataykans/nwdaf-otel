// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"errors"
	"time"
)



// NfProfile - Information of an NF Instance registered in the NRF
type NfProfile struct {

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NfInstanceId string `json:"nfInstanceId"`

	NfInstanceName string `json:"nfInstanceName,omitempty"`

	NfType NfType `json:"nfType"`

	NfStatus *NfStatus `json:"nfStatus"`

	CollocatedNfInstances []CollocatedNfInstance `json:"collocatedNfInstances,omitempty"`

	HeartBeatTimer int32 `json:"heartBeatTimer,omitempty"`

	PlmnList []PlmnId `json:"plmnList,omitempty"`

	SnpnList []PlmnIdNid `json:"snpnList,omitempty"`

	SNssais []ExtSnssai `json:"sNssais,omitempty"`

	PerPlmnSnssaiList []PlmnSnssai `json:"perPlmnSnssaiList,omitempty"`

	NsiList []string `json:"nsiList,omitempty"`

	// Fully Qualified Domain Name
	Fqdn string `json:"fqdn,omitempty"`

	// Fully Qualified Domain Name
	InterPlmnFqdn string `json:"interPlmnFqdn,omitempty"`

	Ipv4Addresses []string `json:"ipv4Addresses,omitempty"`

	Ipv6Addresses []Ipv6Addr `json:"ipv6Addresses,omitempty"`

	AllowedPlmns []PlmnId `json:"allowedPlmns,omitempty"`

	AllowedSnpns []PlmnIdNid `json:"allowedSnpns,omitempty"`

	AllowedNfTypes []NfType `json:"allowedNfTypes,omitempty"`

	AllowedNfDomains []string `json:"allowedNfDomains,omitempty"`

	AllowedNssais []ExtSnssai `json:"allowedNssais,omitempty"`

	Priority int32 `json:"priority,omitempty"`

	Capacity int32 `json:"capacity,omitempty"`

	Load int32 `json:"load,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	LoadTimeStamp time.Time `json:"loadTimeStamp,omitempty"`

	Locality string `json:"locality,omitempty"`

	UdrInfo UdrInfo `json:"udrInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of UdrInfo 
	UdrInfoList map[string]UdrInfo `json:"udrInfoList,omitempty"`

	UdmInfo UdmInfo `json:"udmInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of UdmInfo 
	UdmInfoList map[string]UdmInfo `json:"udmInfoList,omitempty"`

	AusfInfo AusfInfo `json:"ausfInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of AusfInfo 
	AusfInfoList map[string]AusfInfo `json:"ausfInfoList,omitempty"`

	AmfInfo AmfInfo `json:"amfInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of AmfInfo 
	AmfInfoList map[string]AmfInfo `json:"amfInfoList,omitempty"`

	SmfInfo SmfInfo `json:"smfInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of SmfInfo 
	SmfInfoList map[string]SmfInfo `json:"smfInfoList,omitempty"`

	UpfInfo UpfInfo `json:"upfInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of UpfInfo 
	UpfInfoList map[string]UpfInfo `json:"upfInfoList,omitempty"`

	PcfInfo PcfInfo `json:"pcfInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of PcfInfo 
	PcfInfoList map[string]PcfInfo `json:"pcfInfoList,omitempty"`

	BsfInfo BsfInfo `json:"bsfInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of BsfInfo 
	BsfInfoList map[string]BsfInfo `json:"bsfInfoList,omitempty"`

	ChfInfo ChfInfo `json:"chfInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of ChfInfo 
	ChfInfoList map[string]ChfInfo `json:"chfInfoList,omitempty"`

	NefInfo NefInfo `json:"nefInfo,omitempty"`

	NrfInfo NrfInfo `json:"nrfInfo,omitempty"`

	UdsfInfo UdsfInfo `json:"udsfInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of UdsfInfo 
	UdsfInfoList map[string]UdsfInfo `json:"udsfInfoList,omitempty"`

	NwdafInfo NwdafInfo `json:"nwdafInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of NwdafInfo 
	NwdafInfoList map[string]NwdafInfo `json:"nwdafInfoList,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of PcscfInfo 
	PcscfInfoList map[string]PcscfInfo `json:"pcscfInfoList,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of HssInfo 
	HssInfoList map[string]HssInfo `json:"hssInfoList,omitempty"`

	CustomInfo map[string]interface{} `json:"customInfo,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	RecoveryTime time.Time `json:"recoveryTime,omitempty"`

	NfServicePersistence bool `json:"nfServicePersistence,omitempty"`

	// Deprecated
	NfServices []NfService `json:"nfServices,omitempty"`

	// A map (list of key-value pairs) where serviceInstanceId serves as key of NFService 
	NfServiceList map[string]NfService `json:"nfServiceList,omitempty"`

	NfProfileChangesSupportInd bool `json:"nfProfileChangesSupportInd,omitempty"`

	NfProfileChangesInd bool `json:"nfProfileChangesInd,omitempty"`

	DefaultNotificationSubscriptions []DefaultNotificationSubscription `json:"defaultNotificationSubscriptions,omitempty"`

	LmfInfo LmfInfo `json:"lmfInfo,omitempty"`

	GmlcInfo GmlcInfo `json:"gmlcInfo,omitempty"`

	NfSetIdList []string `json:"nfSetIdList,omitempty"`

	ServingScope []string `json:"servingScope,omitempty"`

	LcHSupportInd bool `json:"lcHSupportInd,omitempty"`

	OlcHSupportInd bool `json:"olcHSupportInd,omitempty"`

	// A map (list of key-value pairs) where NfSetId serves as key of DateTime
	NfSetRecoveryTimeList map[string]time.Time `json:"nfSetRecoveryTimeList,omitempty"`

	// A map (list of key-value pairs) where NfServiceSetId serves as key of DateTime 
	ServiceSetRecoveryTimeList map[string]time.Time `json:"serviceSetRecoveryTimeList,omitempty"`

	ScpDomains []string `json:"scpDomains,omitempty"`

	ScpInfo ScpInfo `json:"scpInfo,omitempty"`

	SeppInfo SeppInfo `json:"seppInfo,omitempty"`

	// Vendor ID of the NF Service instance (Private Enterprise Number assigned by IANA)
	VendorId string `json:"vendorId,omitempty"`

	// The key of the map is the IANA-assigned SMI Network Management Private Enterprise Codes 
	SupportedVendorSpecificFeatures map[string][]VendorSpecificFeature `json:"supportedVendorSpecificFeatures,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of AanfInfo 
	AanfInfoList map[string]AanfInfo `json:"aanfInfoList,omitempty"`

	Var5gDdnmfInfo Model5GDdnmfInfo `json:"5gDdnmfInfo,omitempty"`

	MfafInfo MfafInfo `json:"mfafInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of EasdfInfo 
	EasdfInfoList map[string]EasdfInfo `json:"easdfInfoList,omitempty"`

	DccfInfo DccfInfo `json:"dccfInfo,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of NsacfInfo 
	NsacfInfoList map[string]NsacfInfo `json:"nsacfInfoList,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of MbSmfInfo 
	MbSmfInfoList map[string]MbSmfInfo `json:"mbSmfInfoList,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of TsctsfInfo 
	TsctsfInfoList map[string]TsctsfInfo `json:"tsctsfInfoList,omitempty"`

	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of MbUpfInfo 
	MbUpfInfoList map[string]MbUpfInfo `json:"mbUpfInfoList,omitempty"`

	TrustAfInfo TrustAfInfo `json:"trustAfInfo,omitempty"`

	NssaafInfo NssaafInfo `json:"nssaafInfo,omitempty"`

	HniList []string `json:"hniList,omitempty"`

	IwmscInfo IwmscInfo `json:"iwmscInfo,omitempty"`

	MnpfInfo MnpfInfo `json:"mnpfInfo,omitempty"`
}

// AssertNfProfileRequired checks if the required fields are not zero-ed
func AssertNfProfileRequired(obj NfProfile) error {
	elements := map[string]interface{}{
		"nfInstanceId": obj.NfInstanceId,
		"nfType": obj.NfType,
		"nfStatus": obj.NfStatus,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNfTypeRequired(obj.NfType); err != nil {
		return err
	}
	if obj.NfStatus != nil {
		if err := AssertNfStatusRequired(*obj.NfStatus); err != nil {
			return err
		}
	}
	for _, el := range obj.CollocatedNfInstances {
		if err := AssertCollocatedNfInstanceRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PlmnList {
		if err := AssertPlmnIdRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SnpnList {
		if err := AssertPlmnIdNidRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SNssais {
		if err := AssertExtSnssaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PerPlmnSnssaiList {
		if err := AssertPlmnSnssaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv6Addresses {
		if err := AssertIpv6AddrRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AllowedPlmns {
		if err := AssertPlmnIdRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AllowedSnpns {
		if err := AssertPlmnIdNidRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AllowedNfTypes {
		if err := AssertNfTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AllowedNssais {
		if err := AssertExtSnssaiRequired(el); err != nil {
			return err
		}
	}
	if err := AssertUdrInfoRequired(obj.UdrInfo); err != nil {
		return err
	}
	if err := AssertUdmInfoRequired(obj.UdmInfo); err != nil {
		return err
	}
	if err := AssertAusfInfoRequired(obj.AusfInfo); err != nil {
		return err
	}
	if err := AssertAmfInfoRequired(obj.AmfInfo); err != nil {
		return err
	}
	if err := AssertSmfInfoRequired(obj.SmfInfo); err != nil {
		return err
	}
	if err := AssertUpfInfoRequired(obj.UpfInfo); err != nil {
		return err
	}
	if err := AssertPcfInfoRequired(obj.PcfInfo); err != nil {
		return err
	}
	if err := AssertBsfInfoRequired(obj.BsfInfo); err != nil {
		return err
	}
	if err := AssertChfInfoRequired(obj.ChfInfo); err != nil {
		return err
	}
	if err := AssertNefInfoRequired(obj.NefInfo); err != nil {
		return err
	}
	if err := AssertNrfInfoRequired(obj.NrfInfo); err != nil {
		return err
	}
	if err := AssertUdsfInfoRequired(obj.UdsfInfo); err != nil {
		return err
	}
	if err := AssertNwdafInfoRequired(obj.NwdafInfo); err != nil {
		return err
	}
	for _, el := range obj.NfServices {
		if err := AssertNfServiceRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DefaultNotificationSubscriptions {
		if err := AssertDefaultNotificationSubscriptionRequired(el); err != nil {
			return err
		}
	}
	if err := AssertLmfInfoRequired(obj.LmfInfo); err != nil {
		return err
	}
	if err := AssertGmlcInfoRequired(obj.GmlcInfo); err != nil {
		return err
	}
	if err := AssertScpInfoRequired(obj.ScpInfo); err != nil {
		return err
	}
	if err := AssertSeppInfoRequired(obj.SeppInfo); err != nil {
		return err
	}
	if err := AssertModel5GDdnmfInfoRequired(obj.Var5gDdnmfInfo); err != nil {
		return err
	}
	if err := AssertMfafInfoRequired(obj.MfafInfo); err != nil {
		return err
	}
	if err := AssertDccfInfoRequired(obj.DccfInfo); err != nil {
		return err
	}
	if err := AssertTrustAfInfoRequired(obj.TrustAfInfo); err != nil {
		return err
	}
	if err := AssertNssaafInfoRequired(obj.NssaafInfo); err != nil {
		return err
	}
	if err := AssertIwmscInfoRequired(obj.IwmscInfo); err != nil {
		return err
	}
	if err := AssertMnpfInfoRequired(obj.MnpfInfo); err != nil {
		return err
	}
	return nil
}

// AssertNfProfileConstraints checks if the values respects the defined constraints
func AssertNfProfileConstraints(obj NfProfile) error {
	if err := AssertNfTypeConstraints(obj.NfType); err != nil {
		return err
	}
    if obj.NfStatus != nil {
     	if err := AssertNfStatusConstraints(*obj.NfStatus); err != nil {
     		return err
     	}
    }
	for _, el := range obj.CollocatedNfInstances {
		if err := AssertCollocatedNfInstanceConstraints(el); err != nil {
			return err
		}
	}
	if obj.HeartBeatTimer < 1 {
		return &ParsingError{Param: "HeartBeatTimer", Err: errors.New(errMsgMinValueConstraint)}
	}
	for _, el := range obj.PlmnList {
		if err := AssertPlmnIdConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SnpnList {
		if err := AssertPlmnIdNidConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SNssais {
		if err := AssertExtSnssaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PerPlmnSnssaiList {
		if err := AssertPlmnSnssaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv6Addresses {
		if err := AssertIpv6AddrConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AllowedPlmns {
		if err := AssertPlmnIdConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AllowedSnpns {
		if err := AssertPlmnIdNidConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AllowedNfTypes {
		if err := AssertNfTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AllowedNssais {
		if err := AssertExtSnssaiConstraints(el); err != nil {
			return err
		}
	}
	if obj.Priority < 0 {
		return &ParsingError{Param: "Priority", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Priority > 65535 {
		return &ParsingError{Param: "Priority", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Capacity < 0 {
		return &ParsingError{Param: "Capacity", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Capacity > 65535 {
		return &ParsingError{Param: "Capacity", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Load < 0 {
		return &ParsingError{Param: "Load", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Load > 100 {
		return &ParsingError{Param: "Load", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if err := AssertUdrInfoConstraints(obj.UdrInfo); err != nil {
		return err
	}
	if err := AssertUdmInfoConstraints(obj.UdmInfo); err != nil {
		return err
	}
	if err := AssertAusfInfoConstraints(obj.AusfInfo); err != nil {
		return err
	}
	if err := AssertAmfInfoConstraints(obj.AmfInfo); err != nil {
		return err
	}
	if err := AssertSmfInfoConstraints(obj.SmfInfo); err != nil {
		return err
	}
	if err := AssertUpfInfoConstraints(obj.UpfInfo); err != nil {
		return err
	}
	if err := AssertPcfInfoConstraints(obj.PcfInfo); err != nil {
		return err
	}
	if err := AssertBsfInfoConstraints(obj.BsfInfo); err != nil {
		return err
	}
	if err := AssertChfInfoConstraints(obj.ChfInfo); err != nil {
		return err
	}
	if err := AssertNefInfoConstraints(obj.NefInfo); err != nil {
		return err
	}
	if err := AssertNrfInfoConstraints(obj.NrfInfo); err != nil {
		return err
	}
	if err := AssertUdsfInfoConstraints(obj.UdsfInfo); err != nil {
		return err
	}
	if err := AssertNwdafInfoConstraints(obj.NwdafInfo); err != nil {
		return err
	}
	for _, el := range obj.NfServices {
		if err := AssertNfServiceConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DefaultNotificationSubscriptions {
		if err := AssertDefaultNotificationSubscriptionConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertLmfInfoConstraints(obj.LmfInfo); err != nil {
		return err
	}
	if err := AssertGmlcInfoConstraints(obj.GmlcInfo); err != nil {
		return err
	}
	if err := AssertScpInfoConstraints(obj.ScpInfo); err != nil {
		return err
	}
	if err := AssertSeppInfoConstraints(obj.SeppInfo); err != nil {
		return err
	}
	if err := AssertModel5GDdnmfInfoConstraints(obj.Var5gDdnmfInfo); err != nil {
		return err
	}
	if err := AssertMfafInfoConstraints(obj.MfafInfo); err != nil {
		return err
	}
	if err := AssertDccfInfoConstraints(obj.DccfInfo); err != nil {
		return err
	}
	if err := AssertTrustAfInfoConstraints(obj.TrustAfInfo); err != nil {
		return err
	}
	if err := AssertNssaafInfoConstraints(obj.NssaafInfo); err != nil {
		return err
	}
	if err := AssertIwmscInfoConstraints(obj.IwmscInfo); err != nil {
		return err
	}
	if err := AssertMnpfInfoConstraints(obj.MnpfInfo); err != nil {
		return err
	}
	return nil
}
