// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"errors"
)



// AbnormalBehaviour - Represents the abnormal behaviour information.
type AbnormalBehaviour struct {

	Supis []string `json:"supis,omitempty"`

	Excep Exception `json:"excep"`

	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\"). 
	Dnn string `json:"dnn,omitempty"`

	Snssai Snssai `json:"snssai,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	Ratio int32 `json:"ratio,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`

	AddtMeasInfo AdditionalMeasurement `json:"addtMeasInfo,omitempty"`
}

// AssertAbnormalBehaviourRequired checks if the required fields are not zero-ed
func AssertAbnormalBehaviourRequired(obj AbnormalBehaviour) error {
	elements := map[string]interface{}{
		"excep": obj.Excep,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertExceptionRequired(obj.Excep); err != nil {
		return err
	}
	if err := AssertSnssaiRequired(obj.Snssai); err != nil {
		return err
	}
	if err := AssertAdditionalMeasurementRequired(obj.AddtMeasInfo); err != nil {
		return err
	}
	return nil
}

// AssertAbnormalBehaviourConstraints checks if the values respects the defined constraints
func AssertAbnormalBehaviourConstraints(obj AbnormalBehaviour) error {
	if err := AssertExceptionConstraints(obj.Excep); err != nil {
		return err
	}
	if err := AssertSnssaiConstraints(obj.Snssai); err != nil {
		return err
	}
	if obj.Ratio < 1 {
		return &ParsingError{Param: "Ratio", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Ratio > 100 {
		return &ParsingError{Param: "Ratio", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Confidence < 0 {
		return &ParsingError{Param: "Confidence", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertAdditionalMeasurementConstraints(obj.AddtMeasInfo); err != nil {
		return err
	}
	return nil
}
