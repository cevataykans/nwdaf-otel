// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo




// InterfaceUpfInfoItem - Information of a given IP interface of an UPF
type InterfaceUpfInfoItem struct {

	InterfaceType UpInterfaceType `json:"interfaceType"`

	Ipv4EndpointAddresses []string `json:"ipv4EndpointAddresses,omitempty"`

	Ipv6EndpointAddresses []Ipv6Addr `json:"ipv6EndpointAddresses,omitempty"`

	// Fully Qualified Domain Name
	EndpointFqdn string `json:"endpointFqdn,omitempty" validate:"regexp=^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\\\\.)+[A-Za-z]{2,63}\\\\.?$"`

	NetworkInstance string `json:"networkInstance,omitempty"`
}

// AssertInterfaceUpfInfoItemRequired checks if the required fields are not zero-ed
func AssertInterfaceUpfInfoItemRequired(obj InterfaceUpfInfoItem) error {
	elements := map[string]interface{}{
		"interfaceType": obj.InterfaceType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertUpInterfaceTypeRequired(obj.InterfaceType); err != nil {
		return err
	}
	for _, el := range obj.Ipv6EndpointAddresses {
		if err := AssertIpv6AddrRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertInterfaceUpfInfoItemConstraints checks if the values respects the defined constraints
func AssertInterfaceUpfInfoItemConstraints(obj InterfaceUpfInfoItem) error {
	if err := AssertUpInterfaceTypeConstraints(obj.InterfaceType); err != nil {
		return err
	}
	for _, el := range obj.Ipv6EndpointAddresses {
		if err := AssertIpv6AddrConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
