// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"time"
)



// HistoricalData - Contains historical data related to an analytics subscription.
type HistoricalData struct {

	// string with format 'date-time' as defined in OpenAPI.
	StartTime time.Time `json:"startTime,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	EndTime time.Time `json:"endTime,omitempty"`

	// Information about subscriptions with the data sources.
	SubsWithSources []SpecificDataSubscription `json:"subsWithSources,omitempty"`

	// Historical data related to the analytics.
	Data []DataNotification `json:"data"`
}

// AssertHistoricalDataRequired checks if the required fields are not zero-ed
func AssertHistoricalDataRequired(obj HistoricalData) error {
	elements := map[string]interface{}{
		"data": obj.Data,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.SubsWithSources {
		if err := AssertSpecificDataSubscriptionRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Data {
		if err := AssertDataNotificationRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertHistoricalDataConstraints checks if the values respects the defined constraints
func AssertHistoricalDataConstraints(obj HistoricalData) error {
	for _, el := range obj.SubsWithSources {
		if err := AssertSpecificDataSubscriptionConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Data {
		if err := AssertDataNotificationConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
