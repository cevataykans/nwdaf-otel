// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo




// NetworkAssistanceSession - A representation of a Network Assistance Session resource.
type NetworkAssistanceSession struct {

	// String chosen by the 5GMS AF to serve as an identifier in a resource URI.
	NaSessionId string `json:"naSessionId"`

	// String chosen by the 5GMS AF to serve as an identifier in a resource URI.
	ProvisioningSessionId string `json:"provisioningSessionId"`

	ServiceDataFlowDescriptions []ServiceDataFlowDescription `json:"serviceDataFlowDescriptions"`

	MediaType MediaType `json:"mediaType,omitempty"`

	// String chosen by the 5GMS AF to serve as an identifier in a resource URI.
	PolicyTemplateId string `json:"policyTemplateId,omitempty"`

	RequestedQoS M5QoSSpecification `json:"requestedQoS,omitempty"`

	RecommendedQoS M5QoSSpecification `json:"recommendedQoS,omitempty"`

	// Absolute Uniform Resource Locator, conforming with the \"absolute-URI\" production specified in IETF RFC 3986, section 4.3 in which the scheme part is \"http\" or \"https\". Note that the \"query\" suffix is permitted by this production but the \"fragment\" suffix is not.
	NotficationURL string `json:"notficationURL,omitempty"`
}

// AssertNetworkAssistanceSessionRequired checks if the required fields are not zero-ed
func AssertNetworkAssistanceSessionRequired(obj NetworkAssistanceSession) error {
	elements := map[string]interface{}{
		"naSessionId": obj.NaSessionId,
		"provisioningSessionId": obj.ProvisioningSessionId,
		"serviceDataFlowDescriptions": obj.ServiceDataFlowDescriptions,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.ServiceDataFlowDescriptions {
		if err := AssertServiceDataFlowDescriptionRequired(el); err != nil {
			return err
		}
	}
	if err := AssertMediaTypeRequired(obj.MediaType); err != nil {
		return err
	}
	if err := AssertM5QoSSpecificationRequired(obj.RequestedQoS); err != nil {
		return err
	}
	if err := AssertM5QoSSpecificationRequired(obj.RecommendedQoS); err != nil {
		return err
	}
	return nil
}

// AssertNetworkAssistanceSessionConstraints checks if the values respects the defined constraints
func AssertNetworkAssistanceSessionConstraints(obj NetworkAssistanceSession) error {
	for _, el := range obj.ServiceDataFlowDescriptions {
		if err := AssertServiceDataFlowDescriptionConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertMediaTypeConstraints(obj.MediaType); err != nil {
		return err
	}
	if err := AssertM5QoSSpecificationConstraints(obj.RequestedQoS); err != nil {
		return err
	}
	if err := AssertM5QoSSpecificationConstraints(obj.RecommendedQoS); err != nil {
		return err
	}
	return nil
}
