// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"time"
)



type MediaStreamingAccessRecord struct {

	// string with format 'date-time' as defined in OpenAPI.
	Timestamp time.Time `json:"timestamp"`

	MediaStreamHandlerEndpointAddress EndpointAddress `json:"mediaStreamHandlerEndpointAddress"`

	ApplicationServerEndpointAddress EndpointAddress `json:"applicationServerEndpointAddress"`

	SessionIdentifier string `json:"sessionIdentifier,omitempty"`

	RequestMessage MediaStreamingAccessRecordAllOfRequestMessage `json:"requestMessage"`

	CacheStatus CacheStatus `json:"cacheStatus,omitempty"`

	ResponseMessage MediaStreamingAccessRecordAllOfResponseMessage `json:"responseMessage"`

	// string with format 'float' as defined in OpenAPI.
	ProcessingLatency float32 `json:"processingLatency"`

	ConnectionMetrics MediaStreamingAccessRecordAllOfConnectionMetrics `json:"connectionMetrics,omitempty"`
}

// AssertMediaStreamingAccessRecordRequired checks if the required fields are not zero-ed
func AssertMediaStreamingAccessRecordRequired(obj MediaStreamingAccessRecord) error {
	elements := map[string]interface{}{
		"timestamp": obj.Timestamp,
		"mediaStreamHandlerEndpointAddress": obj.MediaStreamHandlerEndpointAddress,
		"applicationServerEndpointAddress": obj.ApplicationServerEndpointAddress,
		"requestMessage": obj.RequestMessage,
		"responseMessage": obj.ResponseMessage,
		"processingLatency": obj.ProcessingLatency,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertEndpointAddressRequired(obj.MediaStreamHandlerEndpointAddress); err != nil {
		return err
	}
	if err := AssertEndpointAddressRequired(obj.ApplicationServerEndpointAddress); err != nil {
		return err
	}
	if err := AssertMediaStreamingAccessRecordAllOfRequestMessageRequired(obj.RequestMessage); err != nil {
		return err
	}
	if err := AssertCacheStatusRequired(obj.CacheStatus); err != nil {
		return err
	}
	if err := AssertMediaStreamingAccessRecordAllOfResponseMessageRequired(obj.ResponseMessage); err != nil {
		return err
	}
	if err := AssertMediaStreamingAccessRecordAllOfConnectionMetricsRequired(obj.ConnectionMetrics); err != nil {
		return err
	}
	return nil
}

// AssertMediaStreamingAccessRecordConstraints checks if the values respects the defined constraints
func AssertMediaStreamingAccessRecordConstraints(obj MediaStreamingAccessRecord) error {
	if err := AssertEndpointAddressConstraints(obj.MediaStreamHandlerEndpointAddress); err != nil {
		return err
	}
	if err := AssertEndpointAddressConstraints(obj.ApplicationServerEndpointAddress); err != nil {
		return err
	}
	if err := AssertMediaStreamingAccessRecordAllOfRequestMessageConstraints(obj.RequestMessage); err != nil {
		return err
	}
	if err := AssertCacheStatusConstraints(obj.CacheStatus); err != nil {
		return err
	}
	if err := AssertMediaStreamingAccessRecordAllOfResponseMessageConstraints(obj.ResponseMessage); err != nil {
		return err
	}
	if err := AssertMediaStreamingAccessRecordAllOfConnectionMetricsConstraints(obj.ConnectionMetrics); err != nil {
		return err
	}
	return nil
}
