// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo




type NrfInfoServedUdmInfoValue struct {

	// Identifier of a group of NFs.
	GroupId string `json:"groupId,omitempty"`

	SupiRanges []SupiRange `json:"supiRanges,omitempty"`

	GpsiRanges []IdentityRange `json:"gpsiRanges,omitempty"`

	ExternalGroupIdentifiersRanges []IdentityRange `json:"externalGroupIdentifiersRanges,omitempty"`

	RoutingIndicators []string `json:"routingIndicators,omitempty"`

	InternalGroupIdentifiersRanges []InternalGroupIdRange `json:"internalGroupIdentifiersRanges,omitempty"`

	SuciInfos []SuciInfo `json:"suciInfos,omitempty"`
}

// AssertNrfInfoServedUdmInfoValueRequired checks if the required fields are not zero-ed
func AssertNrfInfoServedUdmInfoValueRequired(obj NrfInfoServedUdmInfoValue) error {
	for _, el := range obj.SupiRanges {
		if err := AssertSupiRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExternalGroupIdentifiersRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InternalGroupIdentifiersRanges {
		if err := AssertInternalGroupIdRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SuciInfos {
		if err := AssertSuciInfoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertNrfInfoServedUdmInfoValueConstraints checks if the values respects the defined constraints
func AssertNrfInfoServedUdmInfoValueConstraints(obj NrfInfoServedUdmInfoValue) error {
	for _, el := range obj.SupiRanges {
		if err := AssertSupiRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExternalGroupIdentifiersRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InternalGroupIdentifiersRanges {
		if err := AssertInternalGroupIdRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SuciInfos {
		if err := AssertSuciInfoConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
