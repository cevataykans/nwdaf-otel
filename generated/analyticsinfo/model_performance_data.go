// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"errors"
)



// PerformanceData - Contains Performance Data.
type PerformanceData struct {

	// Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds. 
	Pdb int32 `json:"pdb,omitempty"`

	// Unsigned integer indicating Packet Loss Rate (see clauses 5.7.2.8 and 5.7.4 of 3GPP TS 23.501), expressed in tenth of percent. 
	Plr int32 `json:"plr,omitempty"`

	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	ThrputUl string `json:"thrputUl,omitempty" validate:"regexp=^\\\\d+(\\\\.\\\\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$"`

	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	ThrputDl string `json:"thrputDl,omitempty" validate:"regexp=^\\\\d+(\\\\.\\\\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$"`
}

// AssertPerformanceDataRequired checks if the required fields are not zero-ed
func AssertPerformanceDataRequired(obj PerformanceData) error {
	return nil
}

// AssertPerformanceDataConstraints checks if the values respects the defined constraints
func AssertPerformanceDataConstraints(obj PerformanceData) error {
	if obj.Pdb < 1 {
		return &ParsingError{Param: "Pdb", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Plr < 0 {
		return &ParsingError{Param: "Plr", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Plr > 1000 {
		return &ParsingError{Param: "Plr", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
