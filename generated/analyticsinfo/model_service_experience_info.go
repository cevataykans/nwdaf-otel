// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"errors"
)



// ServiceExperienceInfo - Represents service experience information.
type ServiceExperienceInfo struct {

	SvcExprc SvcExperience `json:"svcExprc"`

	// string with format 'float' as defined in OpenAPI.
	SvcExprcVariance float32 `json:"svcExprcVariance,omitempty"`

	Supis []string `json:"supis,omitempty"`

	Snssai Snssai `json:"snssai,omitempty"`

	// String providing an application identifier.
	AppId string `json:"appId,omitempty"`

	SrvExpcType ServiceExperienceType `json:"srvExpcType,omitempty"`

	UeLocs []LocationInfo `json:"ueLocs,omitempty"`

	UpfInfo UpfInformation `json:"upfInfo,omitempty"`

	// DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.
	Dnai string `json:"dnai,omitempty"`

	AppServerInst AddrFqdn `json:"appServerInst,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`

	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\"). 
	Dnn string `json:"dnn,omitempty"`

	NetworkArea NetworkAreaInfo `json:"networkArea,omitempty"`

	// Contains the Identifier of the selected Network Slice instance
	NsiId string `json:"nsiId,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	Ratio int32 `json:"ratio,omitempty"`

	RatFreq RatFreqInformation `json:"ratFreq,omitempty"`
}

// AssertServiceExperienceInfoRequired checks if the required fields are not zero-ed
func AssertServiceExperienceInfoRequired(obj ServiceExperienceInfo) error {
	elements := map[string]interface{}{
		"svcExprc": obj.SvcExprc,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSvcExperienceRequired(obj.SvcExprc); err != nil {
		return err
	}
	if err := AssertSnssaiRequired(obj.Snssai); err != nil {
		return err
	}
	if err := AssertServiceExperienceTypeRequired(obj.SrvExpcType); err != nil {
		return err
	}
	for _, el := range obj.UeLocs {
		if err := AssertLocationInfoRequired(el); err != nil {
			return err
		}
	}
	if err := AssertUpfInformationRequired(obj.UpfInfo); err != nil {
		return err
	}
	if err := AssertAddrFqdnRequired(obj.AppServerInst); err != nil {
		return err
	}
	if err := AssertNetworkAreaInfoRequired(obj.NetworkArea); err != nil {
		return err
	}
	if err := AssertRatFreqInformationRequired(obj.RatFreq); err != nil {
		return err
	}
	return nil
}

// AssertServiceExperienceInfoConstraints checks if the values respects the defined constraints
func AssertServiceExperienceInfoConstraints(obj ServiceExperienceInfo) error {
	if err := AssertSvcExperienceConstraints(obj.SvcExprc); err != nil {
		return err
	}
	if err := AssertSnssaiConstraints(obj.Snssai); err != nil {
		return err
	}
	if err := AssertServiceExperienceTypeConstraints(obj.SrvExpcType); err != nil {
		return err
	}
	for _, el := range obj.UeLocs {
		if err := AssertLocationInfoConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertUpfInformationConstraints(obj.UpfInfo); err != nil {
		return err
	}
	if err := AssertAddrFqdnConstraints(obj.AppServerInst); err != nil {
		return err
	}
	if obj.Confidence < 0 {
		return &ParsingError{Param: "Confidence", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertNetworkAreaInfoConstraints(obj.NetworkArea); err != nil {
		return err
	}
	if obj.Ratio < 1 {
		return &ParsingError{Param: "Ratio", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Ratio > 100 {
		return &ParsingError{Param: "Ratio", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if err := AssertRatFreqInformationConstraints(obj.RatFreq); err != nil {
		return err
	}
	return nil
}
