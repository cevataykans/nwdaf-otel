// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"errors"
)



// RatFreqInformation - Represents the RAT type and/or Frequency information.
type RatFreqInformation struct {

	// Set to \"true\" to indicate to handle all the frequencies the NWDAF received, otherwise  set to \"false\" or omit. The \"allFreq\" attribute and the \"freq\" attribute are mutually  exclusive. 
	AllFreq bool `json:"allFreq,omitempty"`

	// Set to \"true\" to indicate to handle all the RAT Types the NWDAF received, otherwise  set to \"false\" or omit. The \"allRat\" attribute and the \"ratType\" attribute are mutually  exclusive. 
	AllRat bool `json:"allRat,omitempty"`

	// Integer value indicating the ARFCN applicable for a downlink, uplink or bi-directional (TDD) NR global frequency raster, as definition of \"ARFCN-ValueNR\" IE in clause 6.3.2 of 3GPP TS 38.331. 
	Freq int32 `json:"freq,omitempty"`

	RatType RatType `json:"ratType,omitempty"`

	SvcExpThreshold ThresholdLevel `json:"svcExpThreshold,omitempty"`

	MatchingDir MatchingDirection `json:"matchingDir,omitempty"`
}

// AssertRatFreqInformationRequired checks if the required fields are not zero-ed
func AssertRatFreqInformationRequired(obj RatFreqInformation) error {
	if err := AssertRatTypeRequired(obj.RatType); err != nil {
		return err
	}
	if err := AssertThresholdLevelRequired(obj.SvcExpThreshold); err != nil {
		return err
	}
	if err := AssertMatchingDirectionRequired(obj.MatchingDir); err != nil {
		return err
	}
	return nil
}

// AssertRatFreqInformationConstraints checks if the values respects the defined constraints
func AssertRatFreqInformationConstraints(obj RatFreqInformation) error {
	if obj.Freq < 0 {
		return &ParsingError{Param: "Freq", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Freq > 3279165 {
		return &ParsingError{Param: "Freq", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if err := AssertRatTypeConstraints(obj.RatType); err != nil {
		return err
	}
	if err := AssertThresholdLevelConstraints(obj.SvcExpThreshold); err != nil {
		return err
	}
	if err := AssertMatchingDirectionConstraints(obj.MatchingDir); err != nil {
		return err
	}
	return nil
}
