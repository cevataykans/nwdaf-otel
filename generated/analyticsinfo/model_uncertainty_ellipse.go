// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"errors"
)



// UncertaintyEllipse - Ellipse with uncertainty.
type UncertaintyEllipse struct {

	// Indicates value of uncertainty.
	SemiMajor float32 `json:"semiMajor"`

	// Indicates value of uncertainty.
	SemiMinor float32 `json:"semiMinor"`

	// Indicates value of orientation angle.
	OrientationMajor int32 `json:"orientationMajor"`
}

// AssertUncertaintyEllipseRequired checks if the required fields are not zero-ed
func AssertUncertaintyEllipseRequired(obj UncertaintyEllipse) error {
	elements := map[string]interface{}{
		"semiMajor": obj.SemiMajor,
		"semiMinor": obj.SemiMinor,
		"orientationMajor": obj.OrientationMajor,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertUncertaintyEllipseConstraints checks if the values respects the defined constraints
func AssertUncertaintyEllipseConstraints(obj UncertaintyEllipse) error {
	if obj.SemiMajor < 0 {
		return &ParsingError{Param: "SemiMajor", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.SemiMinor < 0 {
		return &ParsingError{Param: "SemiMinor", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.OrientationMajor < 0 {
		return &ParsingError{Param: "OrientationMajor", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.OrientationMajor > 180 {
		return &ParsingError{Param: "OrientationMajor", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
