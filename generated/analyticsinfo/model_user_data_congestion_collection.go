// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo




// UserDataCongestionCollection - Contains User Data Congestion Analytics related information collection.
type UserDataCongestionCollection struct {

	// String providing an application identifier.
	AppId string `json:"appId,omitempty"`

	IpTrafficFilter FlowInfo `json:"ipTrafficFilter,omitempty"`

	TimeInterv TimeWindow `json:"timeInterv,omitempty"`

	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	ThrputUl string `json:"thrputUl,omitempty"`

	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	ThrputDl string `json:"thrputDl,omitempty"`

	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	ThrputPkUl string `json:"thrputPkUl,omitempty"`

	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	ThrputPkDl string `json:"thrputPkDl,omitempty"`
}

// AssertUserDataCongestionCollectionRequired checks if the required fields are not zero-ed
func AssertUserDataCongestionCollectionRequired(obj UserDataCongestionCollection) error {
	if err := AssertFlowInfoRequired(obj.IpTrafficFilter); err != nil {
		return err
	}
	if err := AssertTimeWindowRequired(obj.TimeInterv); err != nil {
		return err
	}
	return nil
}

// AssertUserDataCongestionCollectionConstraints checks if the values respects the defined constraints
func AssertUserDataCongestionCollectionConstraints(obj UserDataCongestionCollection) error {
	if err := AssertFlowInfoConstraints(obj.IpTrafficFilter); err != nil {
		return err
	}
	if err := AssertTimeWindowConstraints(obj.TimeInterv); err != nil {
		return err
	}
	return nil
}
