// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"errors"
)



type EndpointAddress struct {

	Hostname string `json:"hostname,omitempty"`

	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166. 
	Ipv4Addr string `json:"ipv4Addr,omitempty" validate:"regexp=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`

	Ipv6Addr Ipv6Addr `json:"ipv6Addr,omitempty"`

	// Integer where the allowed values correspond to the value range of an unsigned 16-bit integer.
	PortNumber int32 `json:"portNumber"`
}

// AssertEndpointAddressRequired checks if the required fields are not zero-ed
func AssertEndpointAddressRequired(obj EndpointAddress) error {
	elements := map[string]interface{}{
		"portNumber": obj.PortNumber,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertIpv6AddrRequired(obj.Ipv6Addr); err != nil {
		return err
	}
	return nil
}

// AssertEndpointAddressConstraints checks if the values respects the defined constraints
func AssertEndpointAddressConstraints(obj EndpointAddress) error {
	if err := AssertIpv6AddrConstraints(obj.Ipv6Addr); err != nil {
		return err
	}
	if obj.PortNumber < 0 {
		return &ParsingError{Param: "PortNumber", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PortNumber > 65535 {
		return &ParsingError{Param: "PortNumber", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
