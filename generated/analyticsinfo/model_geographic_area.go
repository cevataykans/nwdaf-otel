// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"errors"
)



// GeographicArea - Geographic area specified by different shape.
type GeographicArea struct {

	Shape SupportedGadShapes `json:"shape"`

	Point GeographicalCoordinates `json:"point"`

	// Indicates value of uncertainty.
	Uncertainty float32 `json:"uncertainty"`

	UncertaintyEllipse UncertaintyEllipse `json:"uncertaintyEllipse"`

	// Indicates value of confidence.
	Confidence int32 `json:"confidence"`

	// List of points.
	PointList []GeographicalCoordinates `json:"pointList"`

	// Indicates value of altitude.
	Altitude float64 `json:"altitude"`

	// Indicates value of uncertainty.
	UncertaintyAltitude float32 `json:"uncertaintyAltitude"`

	// Indicates value of confidence.
	VConfidence int32 `json:"vConfidence,omitempty"`

	// Indicates value of the inner radius.
	InnerRadius int32 `json:"innerRadius"`

	// Indicates value of uncertainty.
	UncertaintyRadius float32 `json:"uncertaintyRadius"`

	// Indicates value of angle.
	OffsetAngle int32 `json:"offsetAngle"`

	// Indicates value of angle.
	IncludedAngle int32 `json:"includedAngle"`
}

// AssertGeographicAreaRequired checks if the required fields are not zero-ed
func AssertGeographicAreaRequired(obj GeographicArea) error {
	elements := map[string]interface{}{
		"shape": obj.Shape,
		"point": obj.Point,
		"uncertainty": obj.Uncertainty,
		"uncertaintyEllipse": obj.UncertaintyEllipse,
		"confidence": obj.Confidence,
		"pointList": obj.PointList,
		"altitude": obj.Altitude,
		"uncertaintyAltitude": obj.UncertaintyAltitude,
		"innerRadius": obj.InnerRadius,
		"uncertaintyRadius": obj.UncertaintyRadius,
		"offsetAngle": obj.OffsetAngle,
		"includedAngle": obj.IncludedAngle,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSupportedGadShapesRequired(obj.Shape); err != nil {
		return err
	}
	if err := AssertGeographicalCoordinatesRequired(obj.Point); err != nil {
		return err
	}
	if err := AssertUncertaintyEllipseRequired(obj.UncertaintyEllipse); err != nil {
		return err
	}
	for _, el := range obj.PointList {
		if err := AssertGeographicalCoordinatesRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertGeographicAreaConstraints checks if the values respects the defined constraints
func AssertGeographicAreaConstraints(obj GeographicArea) error {
	if err := AssertSupportedGadShapesConstraints(obj.Shape); err != nil {
		return err
	}
	if err := AssertGeographicalCoordinatesConstraints(obj.Point); err != nil {
		return err
	}
	if obj.Uncertainty < 0 {
		return &ParsingError{Param: "Uncertainty", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertUncertaintyEllipseConstraints(obj.UncertaintyEllipse); err != nil {
		return err
	}
	if obj.Confidence < 0 {
		return &ParsingError{Param: "Confidence", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Confidence > 100 {
		return &ParsingError{Param: "Confidence", Err: errors.New(errMsgMaxValueConstraint)}
	}
	for _, el := range obj.PointList {
		if err := AssertGeographicalCoordinatesConstraints(el); err != nil {
			return err
		}
	}
	if obj.Altitude < -32767 {
		return &ParsingError{Param: "Altitude", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Altitude > 32767 {
		return &ParsingError{Param: "Altitude", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.UncertaintyAltitude < 0 {
		return &ParsingError{Param: "UncertaintyAltitude", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.VConfidence < 0 {
		return &ParsingError{Param: "VConfidence", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.VConfidence > 100 {
		return &ParsingError{Param: "VConfidence", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.InnerRadius < 0 {
		return &ParsingError{Param: "InnerRadius", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.InnerRadius > 327675 {
		return &ParsingError{Param: "InnerRadius", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.UncertaintyRadius < 0 {
		return &ParsingError{Param: "UncertaintyRadius", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.OffsetAngle < 0 {
		return &ParsingError{Param: "OffsetAngle", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.OffsetAngle > 360 {
		return &ParsingError{Param: "OffsetAngle", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.IncludedAngle < 0 {
		return &ParsingError{Param: "IncludedAngle", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.IncludedAngle > 360 {
		return &ParsingError{Param: "IncludedAngle", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
