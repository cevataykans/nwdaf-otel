// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"time"
	"errors"
)



// EventReportingRequirement - Represents the type of reporting that the subscription requires.
type EventReportingRequirement struct {

	Accuracy Accuracy `json:"accuracy,omitempty"`

	// Each element indicates the preferred accuracy level per analytics subset. It may be present if the \"listOfAnaSubsets\" attribute is present in the subscription request when the subscription event is NF_LOAD, UE_COMMUNICATION, DISPERSION, NETWORK_PERFORMANCE, WLAN_PERFORMANCE, DN_PERFORMANCE or SERVICE_EXPERIENCE. 
	AccPerSubset []Accuracy `json:"accPerSubset,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	StartTs time.Time `json:"startTs,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	EndTs time.Time `json:"endTs,omitempty"`

	// Offset period in units of seconds to the reporting time, if the value is negative means  statistics in the past offset period, otherwise a positive value means prediction in the  future offset period. May be present if the \"repPeriod\" attribute is included within the  \"evtReq\" attribute. 
	OffsetPeriod int32 `json:"offsetPeriod,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	SampRatio int32 `json:"sampRatio,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	MaxObjectNbr int32 `json:"maxObjectNbr,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	MaxSupiNbr int32 `json:"maxSupiNbr,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	TimeAnaNeeded time.Time `json:"timeAnaNeeded,omitempty"`

	AnaMeta []AnalyticsMetadata `json:"anaMeta,omitempty"`

	AnaMetaInd AnalyticsMetadataIndication `json:"anaMetaInd,omitempty"`

	HistAnaTimePeriod TimeWindow `json:"histAnaTimePeriod,omitempty"`
}

// AssertEventReportingRequirementRequired checks if the required fields are not zero-ed
func AssertEventReportingRequirementRequired(obj EventReportingRequirement) error {
	if err := AssertAccuracyRequired(obj.Accuracy); err != nil {
		return err
	}
	for _, el := range obj.AccPerSubset {
		if err := AssertAccuracyRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AnaMeta {
		if err := AssertAnalyticsMetadataRequired(el); err != nil {
			return err
		}
	}
	if err := AssertAnalyticsMetadataIndicationRequired(obj.AnaMetaInd); err != nil {
		return err
	}
	if err := AssertTimeWindowRequired(obj.HistAnaTimePeriod); err != nil {
		return err
	}
	return nil
}

// AssertEventReportingRequirementConstraints checks if the values respects the defined constraints
func AssertEventReportingRequirementConstraints(obj EventReportingRequirement) error {
	if err := AssertAccuracyConstraints(obj.Accuracy); err != nil {
		return err
	}
	for _, el := range obj.AccPerSubset {
		if err := AssertAccuracyConstraints(el); err != nil {
			return err
		}
	}
	if obj.SampRatio < 1 {
		return &ParsingError{Param: "SampRatio", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.SampRatio > 100 {
		return &ParsingError{Param: "SampRatio", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.MaxObjectNbr < 0 {
		return &ParsingError{Param: "MaxObjectNbr", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.MaxSupiNbr < 0 {
		return &ParsingError{Param: "MaxSupiNbr", Err: errors.New(errMsgMinValueConstraint)}
	}
	for _, el := range obj.AnaMeta {
		if err := AssertAnalyticsMetadataConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertAnalyticsMetadataIndicationConstraints(obj.AnaMetaInd); err != nil {
		return err
	}
	if err := AssertTimeWindowConstraints(obj.HistAnaTimePeriod); err != nil {
		return err
	}
	return nil
}
