// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo


import (
	"time"
)



// UeLocationTrendsReportItem - Report Item for UE Location Trends event.
type UeLocationTrendsReportItem struct {

	Tai Tai `json:"tai,omitempty"`

	Ncgi Ncgi `json:"ncgi,omitempty"`

	Ecgi Ecgi `json:"ecgi,omitempty"`

	N3gaLocation N3gaLocation `json:"n3gaLocation,omitempty"`

	// indicating a time in seconds.
	Spacing int32 `json:"spacing"`

	// indicating a time in seconds.
	Duration int32 `json:"duration"`

	// string with format 'date-time' as defined in OpenAPI.
	Timestamp time.Time `json:"timestamp"`
}

// AssertUeLocationTrendsReportItemRequired checks if the required fields are not zero-ed
func AssertUeLocationTrendsReportItemRequired(obj UeLocationTrendsReportItem) error {
	elements := map[string]interface{}{
		"spacing": obj.Spacing,
		"duration": obj.Duration,
		"timestamp": obj.Timestamp,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertTaiRequired(obj.Tai); err != nil {
		return err
	}
	if err := AssertNcgiRequired(obj.Ncgi); err != nil {
		return err
	}
	if err := AssertEcgiRequired(obj.Ecgi); err != nil {
		return err
	}
	if err := AssertN3gaLocationRequired(obj.N3gaLocation); err != nil {
		return err
	}
	return nil
}

// AssertUeLocationTrendsReportItemConstraints checks if the values respects the defined constraints
func AssertUeLocationTrendsReportItemConstraints(obj UeLocationTrendsReportItem) error {
	if err := AssertTaiConstraints(obj.Tai); err != nil {
		return err
	}
	if err := AssertNcgiConstraints(obj.Ncgi); err != nil {
		return err
	}
	if err := AssertEcgiConstraints(obj.Ecgi); err != nil {
		return err
	}
	if err := AssertN3gaLocationConstraints(obj.N3gaLocation); err != nil {
		return err
	}
	return nil
}
