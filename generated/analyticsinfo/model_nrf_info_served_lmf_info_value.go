// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo




type NrfInfoServedLmfInfoValue struct {

	ServingClientTypes []ExternalClientType `json:"servingClientTypes,omitempty"`

	// LMF identification.
	LmfId string `json:"lmfId,omitempty"`

	ServingAccessTypes []AccessType `json:"servingAccessTypes,omitempty"`

	ServingAnNodeTypes []AnNodeType `json:"servingAnNodeTypes,omitempty"`

	ServingRatTypes []RatType `json:"servingRatTypes,omitempty"`

	TaiList []Tai `json:"taiList,omitempty"`

	TaiRangeList []TaiRange `json:"taiRangeList,omitempty"`

	SupportedGADShapes []SupportedGadShapes `json:"supportedGADShapes,omitempty"`
}

// AssertNrfInfoServedLmfInfoValueRequired checks if the required fields are not zero-ed
func AssertNrfInfoServedLmfInfoValueRequired(obj NrfInfoServedLmfInfoValue) error {
	for _, el := range obj.ServingClientTypes {
		if err := AssertExternalClientTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServingAnNodeTypes {
		if err := AssertAnNodeTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServingRatTypes {
		if err := AssertRatTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SupportedGADShapes {
		if err := AssertSupportedGadShapesRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertNrfInfoServedLmfInfoValueConstraints checks if the values respects the defined constraints
func AssertNrfInfoServedLmfInfoValueConstraints(obj NrfInfoServedLmfInfoValue) error {
	for _, el := range obj.ServingClientTypes {
		if err := AssertExternalClientTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServingAnNodeTypes {
		if err := AssertAnNodeTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServingRatTypes {
		if err := AssertRatTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SupportedGADShapes {
		if err := AssertSupportedGadShapesConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
