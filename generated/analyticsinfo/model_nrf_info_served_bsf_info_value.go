// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo




type NrfInfoServedBsfInfoValue struct {

	DnnList []string `json:"dnnList,omitempty"`

	IpDomainList []string `json:"ipDomainList,omitempty"`

	Ipv4AddressRanges []Ipv4AddressRange `json:"ipv4AddressRanges,omitempty"`

	Ipv6PrefixRanges []Ipv6PrefixRange `json:"ipv6PrefixRanges,omitempty"`

	// Fully Qualified Domain Name
	RxDiamHost string `json:"rxDiamHost,omitempty"`

	// Fully Qualified Domain Name
	RxDiamRealm string `json:"rxDiamRealm,omitempty"`

	// Identifier of a group of NFs.
	GroupId string `json:"groupId,omitempty"`

	SupiRanges []SupiRange `json:"supiRanges,omitempty"`

	GpsiRanges []IdentityRange `json:"gpsiRanges,omitempty"`
}

// AssertNrfInfoServedBsfInfoValueRequired checks if the required fields are not zero-ed
func AssertNrfInfoServedBsfInfoValueRequired(obj NrfInfoServedBsfInfoValue) error {
	for _, el := range obj.Ipv4AddressRanges {
		if err := AssertIpv4AddressRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv6PrefixRanges {
		if err := AssertIpv6PrefixRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SupiRanges {
		if err := AssertSupiRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertNrfInfoServedBsfInfoValueConstraints checks if the values respects the defined constraints
func AssertNrfInfoServedBsfInfoValueConstraints(obj NrfInfoServedBsfInfoValue) error {
	for _, el := range obj.Ipv4AddressRanges {
		if err := AssertIpv4AddressRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv6PrefixRanges {
		if err := AssertIpv6PrefixRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SupiRanges {
		if err := AssertSupiRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
