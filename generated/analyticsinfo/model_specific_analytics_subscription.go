// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo




// SpecificAnalyticsSubscription - Represents an existing subscription for a specific type of analytics to a specific NWDAF. 
type SpecificAnalyticsSubscription struct {

	SubscriptionId string `json:"subscriptionId,omitempty"`

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	ProducerId string `json:"producerId,omitempty"`

	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	ProducerSetId string `json:"producerSetId,omitempty"`

	NwdafEvSub NnwdafEventsSubscription `json:"nwdafEvSub,omitempty"`
}

// AssertSpecificAnalyticsSubscriptionRequired checks if the required fields are not zero-ed
func AssertSpecificAnalyticsSubscriptionRequired(obj SpecificAnalyticsSubscription) error {
	if err := AssertNnwdafEventsSubscriptionRequired(obj.NwdafEvSub); err != nil {
		return err
	}
	return nil
}

// AssertSpecificAnalyticsSubscriptionConstraints checks if the values respects the defined constraints
func AssertSpecificAnalyticsSubscriptionConstraints(obj SpecificAnalyticsSubscription) error {
	if err := AssertNnwdafEventsSubscriptionConstraints(obj.NwdafEvSub); err != nil {
		return err
	}
	return nil
}
