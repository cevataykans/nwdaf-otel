// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package eventssubscription


import (
	"time"
	"errors"
)



// RedundantTransmissionExpPerTs - The redundant transmission experience per Time Slot.
type RedundantTransmissionExpPerTs struct {

	// string with format 'date-time' as defined in OpenAPI.
	TsStart time.Time `json:"tsStart"`

	// indicating a time in seconds.
	TsDuration int32 `json:"tsDuration"`

	ObsvRedTransExp ObservedRedundantTransExp `json:"obsvRedTransExp"`

	// Redundant Transmission Status. Set to \"true\" if redundant transmission was activated, otherwise set to \"false\". Default value is \"false\" if omitted. 
	RedTransStatus bool `json:"redTransStatus,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	UeRatio int32 `json:"ueRatio,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`
}

// AssertRedundantTransmissionExpPerTsRequired checks if the required fields are not zero-ed
func AssertRedundantTransmissionExpPerTsRequired(obj RedundantTransmissionExpPerTs) error {
	elements := map[string]interface{}{
		"tsStart": obj.TsStart,
		"tsDuration": obj.TsDuration,
		"obsvRedTransExp": obj.ObsvRedTransExp,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertObservedRedundantTransExpRequired(obj.ObsvRedTransExp); err != nil {
		return err
	}
	return nil
}

// AssertRedundantTransmissionExpPerTsConstraints checks if the values respects the defined constraints
func AssertRedundantTransmissionExpPerTsConstraints(obj RedundantTransmissionExpPerTs) error {
	if err := AssertObservedRedundantTransExpConstraints(obj.ObsvRedTransExp); err != nil {
		return err
	}
	if obj.UeRatio < 1 {
		return &ParsingError{Param: "UeRatio", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.UeRatio > 100 {
		return &ParsingError{Param: "UeRatio", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Confidence < 0 {
		return &ParsingError{Param: "Confidence", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
