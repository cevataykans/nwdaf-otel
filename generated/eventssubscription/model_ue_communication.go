// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package eventssubscription


import (
	"time"
	"errors"
)



// UeCommunication - Represents UE communication information.
type UeCommunication struct {

	// indicating a time in seconds.
	CommDur int32 `json:"commDur,omitempty"`

	// string with format 'float' as defined in OpenAPI.
	CommDurVariance float32 `json:"commDurVariance,omitempty"`

	// indicating a time in seconds.
	PerioTime int32 `json:"perioTime,omitempty"`

	// string with format 'float' as defined in OpenAPI.
	PerioTimeVariance float32 `json:"perioTimeVariance,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	Ts time.Time `json:"ts,omitempty"`

	// string with format 'float' as defined in OpenAPI.
	TsVariance float32 `json:"tsVariance,omitempty"`

	RecurringTime ScheduledCommunicationTime `json:"recurringTime,omitempty"`

	TrafChar *TrafficCharacterization `json:"trafChar,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	Ratio int32 `json:"ratio,omitempty"`

	PerioCommInd bool `json:"perioCommInd,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`

	AnaOfAppList AppListForUeComm `json:"anaOfAppList,omitempty"`

	SessInactTimer SessInactTimerForUeComm `json:"sessInactTimer,omitempty"`
}

// AssertUeCommunicationRequired checks if the required fields are not zero-ed
func AssertUeCommunicationRequired(obj UeCommunication) error {
	if err := AssertScheduledCommunicationTimeRequired(obj.RecurringTime); err != nil {
		return err
	}
	if obj.TrafChar != nil {
		if err := AssertTrafficCharacterizationRequired(*obj.TrafChar); err != nil {
			return err
		}
	}
	if err := AssertAppListForUeCommRequired(obj.AnaOfAppList); err != nil {
		return err
	}
	if err := AssertSessInactTimerForUeCommRequired(obj.SessInactTimer); err != nil {
		return err
	}
	return nil
}

// AssertUeCommunicationConstraints checks if the values respects the defined constraints
func AssertUeCommunicationConstraints(obj UeCommunication) error {
	if err := AssertScheduledCommunicationTimeConstraints(obj.RecurringTime); err != nil {
		return err
	}
    if obj.TrafChar != nil {
     	if err := AssertTrafficCharacterizationConstraints(*obj.TrafChar); err != nil {
     		return err
     	}
    }
	if obj.Ratio < 1 {
		return &ParsingError{Param: "Ratio", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Ratio > 100 {
		return &ParsingError{Param: "Ratio", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Confidence < 0 {
		return &ParsingError{Param: "Confidence", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertAppListForUeCommConstraints(obj.AnaOfAppList); err != nil {
		return err
	}
	if err := AssertSessInactTimerForUeCommConstraints(obj.SessInactTimer); err != nil {
		return err
	}
	return nil
}
