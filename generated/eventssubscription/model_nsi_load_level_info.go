// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package eventssubscription


import (
	"errors"
)



// NsiLoadLevelInfo - Represents the network slice and optionally the associated network slice instance and the  load level information. 
type NsiLoadLevelInfo struct {

	// Load level information of the network slice and the optionally associated network slice  instance. 
	LoadLevelInformation int32 `json:"loadLevelInformation"`

	Snssai Snssai `json:"snssai"`

	// Contains the Identifier of the selected Network Slice instance
	NsiId string `json:"nsiId,omitempty"`

	ResUsage ResourceUsage `json:"resUsage,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	NumOfExceedLoadLevelThr int32 `json:"numOfExceedLoadLevelThr,omitempty"`

	ExceedLoadLevelThrInd bool `json:"exceedLoadLevelThrInd,omitempty"`

	NetworkArea NetworkAreaInfo `json:"networkArea,omitempty"`

	TimePeriod TimeWindow `json:"timePeriod,omitempty"`

	// Each element indicates the time elapsed between times each threshold is met or exceeded or crossed. The start time and end time are the exact time stamps of the resource usage threshold is reached or exceeded. May be present if the \"listOfAnaSubsets\" attribute is  provided and the maximum number of instances shall not exceed the value provided in the  \"numOfExceedLoadLevelThr\" attribute. 
	ResUsgThrCrossTimePeriod []TimeWindow `json:"resUsgThrCrossTimePeriod,omitempty"`

	NumOfUes NumberAverage `json:"numOfUes,omitempty"`

	NumOfPduSess NumberAverage `json:"numOfPduSess,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`
}

// AssertNsiLoadLevelInfoRequired checks if the required fields are not zero-ed
func AssertNsiLoadLevelInfoRequired(obj NsiLoadLevelInfo) error {
	elements := map[string]interface{}{
		"loadLevelInformation": obj.LoadLevelInformation,
		"snssai": obj.Snssai,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSnssaiRequired(obj.Snssai); err != nil {
		return err
	}
	if err := AssertResourceUsageRequired(obj.ResUsage); err != nil {
		return err
	}
	if err := AssertNetworkAreaInfoRequired(obj.NetworkArea); err != nil {
		return err
	}
	if err := AssertTimeWindowRequired(obj.TimePeriod); err != nil {
		return err
	}
	for _, el := range obj.ResUsgThrCrossTimePeriod {
		if err := AssertTimeWindowRequired(el); err != nil {
			return err
		}
	}
	if err := AssertNumberAverageRequired(obj.NumOfUes); err != nil {
		return err
	}
	if err := AssertNumberAverageRequired(obj.NumOfPduSess); err != nil {
		return err
	}
	return nil
}

// AssertNsiLoadLevelInfoConstraints checks if the values respects the defined constraints
func AssertNsiLoadLevelInfoConstraints(obj NsiLoadLevelInfo) error {
	if err := AssertSnssaiConstraints(obj.Snssai); err != nil {
		return err
	}
	if err := AssertResourceUsageConstraints(obj.ResUsage); err != nil {
		return err
	}
	if obj.NumOfExceedLoadLevelThr < 0 {
		return &ParsingError{Param: "NumOfExceedLoadLevelThr", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertNetworkAreaInfoConstraints(obj.NetworkArea); err != nil {
		return err
	}
	if err := AssertTimeWindowConstraints(obj.TimePeriod); err != nil {
		return err
	}
	for _, el := range obj.ResUsgThrCrossTimePeriod {
		if err := AssertTimeWindowConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertNumberAverageConstraints(obj.NumOfUes); err != nil {
		return err
	}
	if err := AssertNumberAverageConstraints(obj.NumOfPduSess); err != nil {
		return err
	}
	if obj.Confidence < 0 {
		return &ParsingError{Param: "Confidence", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
