// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package eventssubscription


import (
	"errors"
)



// WlanPerTsPerformanceInfo - WLAN performance information per Time Slot during the analytics target period.
type WlanPerTsPerformanceInfo struct {

	// string with format 'date-time' as defined in OpenAPI.
	TsStart time.Time `json:"tsStart"`

	// indicating a time in seconds.
	TsDuration int32 `json:"tsDuration"`

	Rssi int32 `json:"rssi,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Rtt int32 `json:"rtt,omitempty"`

	TrafficInfo *TrafficInformation `json:"trafficInfo,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	NumberOfUes int32 `json:"numberOfUes,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`
}

// AssertWlanPerTsPerformanceInfoRequired checks if the required fields are not zero-ed
func AssertWlanPerTsPerformanceInfoRequired(obj WlanPerTsPerformanceInfo) error {
	elements := map[string]interface{}{
		"tsStart": obj.TsStart,
		"tsDuration": obj.TsDuration,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.TrafficInfo != nil {
		if err := AssertTrafficInformationRequired(*obj.TrafficInfo); err != nil {
			return err
		}
	}
	return nil
}

// AssertWlanPerTsPerformanceInfoConstraints checks if the values respects the defined constraints
func AssertWlanPerTsPerformanceInfoConstraints(obj WlanPerTsPerformanceInfo) error {
	if obj.Rtt < 0 {
		return &ParsingError{Param: "Rtt", Err: errors.New(errMsgMinValueConstraint)}
	}
    if obj.TrafficInfo != nil {
     	if err := AssertTrafficInformationConstraints(*obj.TrafficInfo); err != nil {
     		return err
     	}
    }
	if obj.NumberOfUes < 0 {
		return &ParsingError{Param: "NumberOfUes", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Confidence < 0 {
		return &ParsingError{Param: "Confidence", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
