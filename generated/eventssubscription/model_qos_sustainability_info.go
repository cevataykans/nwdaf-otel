// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package eventssubscription


import (
	"errors"
)



// QosSustainabilityInfo - Represents the QoS Sustainability information.
type QosSustainabilityInfo struct {

	AreaInfo NetworkAreaInfo `json:"areaInfo,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	StartTs time.Time `json:"startTs,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	EndTs time.Time `json:"endTs,omitempty"`

	QosFlowRetThd *RetainabilityThreshold `json:"qosFlowRetThd,omitempty"`

	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	RanUeThrouThd string `json:"ranUeThrouThd,omitempty"`

	Snssai Snssai `json:"snssai,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`
}

// AssertQosSustainabilityInfoRequired checks if the required fields are not zero-ed
func AssertQosSustainabilityInfoRequired(obj QosSustainabilityInfo) error {
	if err := AssertNetworkAreaInfoRequired(obj.AreaInfo); err != nil {
		return err
	}
	if obj.QosFlowRetThd != nil {
		if err := AssertRetainabilityThresholdRequired(*obj.QosFlowRetThd); err != nil {
			return err
		}
	}
	if err := AssertSnssaiRequired(obj.Snssai); err != nil {
		return err
	}
	return nil
}

// AssertQosSustainabilityInfoConstraints checks if the values respects the defined constraints
func AssertQosSustainabilityInfoConstraints(obj QosSustainabilityInfo) error {
	if err := AssertNetworkAreaInfoConstraints(obj.AreaInfo); err != nil {
		return err
	}
    if obj.QosFlowRetThd != nil {
     	if err := AssertRetainabilityThresholdConstraints(*obj.QosFlowRetThd); err != nil {
     		return err
     	}
    }
	if err := AssertSnssaiConstraints(obj.Snssai); err != nil {
		return err
	}
	if obj.Confidence < 0 {
		return &ParsingError{Param: "Confidence", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
