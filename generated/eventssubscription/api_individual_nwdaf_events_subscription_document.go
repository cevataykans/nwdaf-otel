// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package eventssubscription

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IndividualNWDAFEventsSubscriptionDocumentAPIController binds http requests to an api service and writes the service results to the http response
type IndividualNWDAFEventsSubscriptionDocumentAPIController struct {
	service IndividualNWDAFEventsSubscriptionDocumentAPIServicer
	errorHandler ErrorHandler
}

// IndividualNWDAFEventsSubscriptionDocumentAPIOption for how the controller is set up.
type IndividualNWDAFEventsSubscriptionDocumentAPIOption func(*IndividualNWDAFEventsSubscriptionDocumentAPIController)

// WithIndividualNWDAFEventsSubscriptionDocumentAPIErrorHandler inject ErrorHandler into controller
func WithIndividualNWDAFEventsSubscriptionDocumentAPIErrorHandler(h ErrorHandler) IndividualNWDAFEventsSubscriptionDocumentAPIOption {
	return func(c *IndividualNWDAFEventsSubscriptionDocumentAPIController) {
		c.errorHandler = h
	}
}

// NewIndividualNWDAFEventsSubscriptionDocumentAPIController creates a default api controller
func NewIndividualNWDAFEventsSubscriptionDocumentAPIController(s IndividualNWDAFEventsSubscriptionDocumentAPIServicer, opts ...IndividualNWDAFEventsSubscriptionDocumentAPIOption) *IndividualNWDAFEventsSubscriptionDocumentAPIController {
	controller := &IndividualNWDAFEventsSubscriptionDocumentAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IndividualNWDAFEventsSubscriptionDocumentAPIController
func (c *IndividualNWDAFEventsSubscriptionDocumentAPIController) Routes() Routes {
	return Routes{
		"UpdateNWDAFEventsSubscription": Route{
			"UpdateNWDAFEventsSubscription",
			strings.ToUpper("Put"),
			"/nnwdaf-eventssubscription/v1/subscriptions/{subscriptionId}",
			c.UpdateNWDAFEventsSubscription,
		},
		"DeleteNWDAFEventsSubscription": Route{
			"DeleteNWDAFEventsSubscription",
			strings.ToUpper("Delete"),
			"/nnwdaf-eventssubscription/v1/subscriptions/{subscriptionId}",
			c.DeleteNWDAFEventsSubscription,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the IndividualNWDAFEventsSubscriptionDocumentAPIController
func (c *IndividualNWDAFEventsSubscriptionDocumentAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"UpdateNWDAFEventsSubscription",
			strings.ToUpper("Put"),
			"/nnwdaf-eventssubscription/v1/subscriptions/{subscriptionId}",
			c.UpdateNWDAFEventsSubscription,
		},
		Route{
			"DeleteNWDAFEventsSubscription",
			strings.ToUpper("Delete"),
			"/nnwdaf-eventssubscription/v1/subscriptions/{subscriptionId}",
			c.DeleteNWDAFEventsSubscription,
		},
	}
}



// UpdateNWDAFEventsSubscription - Update an existing Individual NWDAF Events Subscription
func (c *IndividualNWDAFEventsSubscriptionDocumentAPIController) UpdateNWDAFEventsSubscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]
	if subscriptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subscriptionId"}, nil)
		return
	}
	var nnwdafEventsSubscriptionParam NnwdafEventsSubscription
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&nnwdafEventsSubscriptionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNnwdafEventsSubscriptionRequired(nnwdafEventsSubscriptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNnwdafEventsSubscriptionConstraints(nnwdafEventsSubscriptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateNWDAFEventsSubscription(r.Context(), subscriptionIdParam, nnwdafEventsSubscriptionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteNWDAFEventsSubscription - Delete an existing Individual NWDAF Events Subscription
func (c *IndividualNWDAFEventsSubscriptionDocumentAPIController) DeleteNWDAFEventsSubscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]
	if subscriptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subscriptionId"}, nil)
		return
	}
	result, err := c.service.DeleteNWDAFEventsSubscription(r.Context(), subscriptionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
