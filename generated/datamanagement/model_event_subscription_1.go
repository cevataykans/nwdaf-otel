// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// EventSubscription1 - Represents a subscription to a single event.
type EventSubscription1 struct {

	Event SmfEvent `json:"event"`

	DnaiChgType DnaiChangeType `json:"dnaiChgType,omitempty"`

	DddTraDescriptors []DddTrafficDescriptor `json:"dddTraDescriptors,omitempty"`

	DddStati []DlDataDeliveryStatus `json:"dddStati,omitempty"`

	AppIds []string `json:"appIds,omitempty"`

	TargetPeriod TimeWindow `json:"targetPeriod,omitempty"`

	// Indicates the subscription for UE transaction dispersion collectionon, if it is included and set to \"true\". Default value is \"false\". 
	TransacDispInd bool `json:"transacDispInd,omitempty"`

	// Indicates Session Management Transaction metrics.
	TransacMetrics []TransactionMetric `json:"transacMetrics,omitempty"`

	UeIpAddr *IpAddr `json:"ueIpAddr,omitempty"`
}

// AssertEventSubscription1Required checks if the required fields are not zero-ed
func AssertEventSubscription1Required(obj EventSubscription1) error {
	elements := map[string]interface{}{
		"event": obj.Event,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSmfEventRequired(obj.Event); err != nil {
		return err
	}
	if err := AssertDnaiChangeTypeRequired(obj.DnaiChgType); err != nil {
		return err
	}
	for _, el := range obj.DddTraDescriptors {
		if err := AssertDddTrafficDescriptorRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DddStati {
		if err := AssertDlDataDeliveryStatusRequired(el); err != nil {
			return err
		}
	}
	if err := AssertTimeWindowRequired(obj.TargetPeriod); err != nil {
		return err
	}
	for _, el := range obj.TransacMetrics {
		if err := AssertTransactionMetricRequired(el); err != nil {
			return err
		}
	}
	if obj.UeIpAddr != nil {
		if err := AssertIpAddrRequired(*obj.UeIpAddr); err != nil {
			return err
		}
	}
	return nil
}

// AssertEventSubscription1Constraints checks if the values respects the defined constraints
func AssertEventSubscription1Constraints(obj EventSubscription1) error {
	if err := AssertSmfEventConstraints(obj.Event); err != nil {
		return err
	}
	if err := AssertDnaiChangeTypeConstraints(obj.DnaiChgType); err != nil {
		return err
	}
	for _, el := range obj.DddTraDescriptors {
		if err := AssertDddTrafficDescriptorConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DddStati {
		if err := AssertDlDataDeliveryStatusConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertTimeWindowConstraints(obj.TargetPeriod); err != nil {
		return err
	}
	for _, el := range obj.TransacMetrics {
		if err := AssertTransactionMetricConstraints(el); err != nil {
			return err
		}
	}
    if obj.UeIpAddr != nil {
     	if err := AssertIpAddrConstraints(*obj.UeIpAddr); err != nil {
     		return err
     	}
    }
	return nil
}
