// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// DccfEvent - Identifies the (event exposure or analytics) event that the processing instructions  shall apply to. Contains all event IDs related to DCCF. 
type DccfEvent struct {

	NwdafEvent NwdafEvent `json:"nwdafEvent,omitempty"`

	SmfEvent SmfEvent `json:"smfEvent,omitempty"`

	AmfEvent AmfEventType `json:"amfEvent,omitempty"`

	NefEvent NefEvent `json:"nefEvent,omitempty"`

	UdmEvent EventType `json:"udmEvent,omitempty"`

	AfEvent AfEvent `json:"afEvent,omitempty"`

	SacEvent SacEvent `json:"sacEvent,omitempty"`

	NrfEvent NotificationEventType `json:"nrfEvent,omitempty"`
}

// AssertDccfEventRequired checks if the required fields are not zero-ed
func AssertDccfEventRequired(obj DccfEvent) error {
	if err := AssertNwdafEventRequired(obj.NwdafEvent); err != nil {
		return err
	}
	if err := AssertSmfEventRequired(obj.SmfEvent); err != nil {
		return err
	}
	if err := AssertAmfEventTypeRequired(obj.AmfEvent); err != nil {
		return err
	}
	if err := AssertNefEventRequired(obj.NefEvent); err != nil {
		return err
	}
	if err := AssertEventTypeRequired(obj.UdmEvent); err != nil {
		return err
	}
	if err := AssertAfEventRequired(obj.AfEvent); err != nil {
		return err
	}
	if err := AssertSacEventRequired(obj.SacEvent); err != nil {
		return err
	}
	if err := AssertNotificationEventTypeRequired(obj.NrfEvent); err != nil {
		return err
	}
	return nil
}

// AssertDccfEventConstraints checks if the values respects the defined constraints
func AssertDccfEventConstraints(obj DccfEvent) error {
	if err := AssertNwdafEventConstraints(obj.NwdafEvent); err != nil {
		return err
	}
	if err := AssertSmfEventConstraints(obj.SmfEvent); err != nil {
		return err
	}
	if err := AssertAmfEventTypeConstraints(obj.AmfEvent); err != nil {
		return err
	}
	if err := AssertNefEventConstraints(obj.NefEvent); err != nil {
		return err
	}
	if err := AssertEventTypeConstraints(obj.UdmEvent); err != nil {
		return err
	}
	if err := AssertAfEventConstraints(obj.AfEvent); err != nil {
		return err
	}
	if err := AssertSacEventConstraints(obj.SacEvent); err != nil {
		return err
	}
	if err := AssertNotificationEventTypeConstraints(obj.NrfEvent); err != nil {
		return err
	}
	return nil
}
