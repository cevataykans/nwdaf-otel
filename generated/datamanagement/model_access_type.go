// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"fmt"
)


// AccessType : Indicates whether the access is  via 3GPP or via non-3GPP.
type AccessType string

// List of AccessType
const (
	_3_GPP_ACCESS AccessType = "3GPP_ACCESS"
	NON_3_GPP_ACCESS AccessType = "NON_3GPP_ACCESS"
)

// AllowedAccessTypeEnumValues is all the allowed values of AccessType enum
var AllowedAccessTypeEnumValues = []AccessType{
	"3GPP_ACCESS",
	"NON_3GPP_ACCESS",
}

// validAccessTypeEnumValue provides a map of AccessTypes for fast verification of use input
var validAccessTypeEnumValues = map[AccessType]struct{}{
	"3GPP_ACCESS": {},
	"NON_3GPP_ACCESS": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessType) IsValid() bool {
	_, ok := validAccessTypeEnumValues[v]
	return ok
}

// NewAccessTypeFromValue returns a pointer to a valid AccessType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessTypeFromValue(v string) (AccessType, error) {
	ev := AccessType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for AccessType: valid values are %v", v, AllowedAccessTypeEnumValues)
}



// AssertAccessTypeRequired checks if the required fields are not zero-ed
func AssertAccessTypeRequired(obj AccessType) error {
	return nil
}

// AssertAccessTypeConstraints checks if the values respects the defined constraints
func AssertAccessTypeConstraints(obj AccessType) error {
	return nil
}
