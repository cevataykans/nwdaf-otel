// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// NwdafInfo - Information of a NWDAF NF Instance
type NwdafInfo struct {

	EventIds []EventId `json:"eventIds,omitempty"`

	NwdafEvents []NwdafEvent `json:"nwdafEvents,omitempty"`

	TaiList []Tai `json:"taiList,omitempty"`

	TaiRangeList []TaiRange `json:"taiRangeList,omitempty"`

	NwdafCapability NwdafCapability `json:"nwdafCapability,omitempty"`

	// indicating a time in seconds.
	AnalyticsDelay int32 `json:"analyticsDelay,omitempty"`

	ServingNfSetIdList []string `json:"servingNfSetIdList,omitempty"`

	ServingNfTypeList []NfType `json:"servingNfTypeList,omitempty"`

	MlAnalyticsList []MlAnalyticsInfo `json:"mlAnalyticsList,omitempty"`
}

// AssertNwdafInfoRequired checks if the required fields are not zero-ed
func AssertNwdafInfoRequired(obj NwdafInfo) error {
	for _, el := range obj.NwdafEvents {
		if err := AssertNwdafEventRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertNwdafCapabilityRequired(obj.NwdafCapability); err != nil {
		return err
	}
	for _, el := range obj.ServingNfTypeList {
		if err := AssertNfTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MlAnalyticsList {
		if err := AssertMlAnalyticsInfoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertNwdafInfoConstraints checks if the values respects the defined constraints
func AssertNwdafInfoConstraints(obj NwdafInfo) error {
	for _, el := range obj.NwdafEvents {
		if err := AssertNwdafEventConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertNwdafCapabilityConstraints(obj.NwdafCapability); err != nil {
		return err
	}
	for _, el := range obj.ServingNfTypeList {
		if err := AssertNfTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MlAnalyticsList {
		if err := AssertMlAnalyticsInfoConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
