// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   © 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"time"
)



// SacEventSubscription - Request data to create the event subscription
type SacEventSubscription struct {

	Event SacEvent `json:"event"`

	// String providing an URI formatted according to RFC 3986.
	EventNotifyUri string `json:"eventNotifyUri"`

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NfId string `json:"nfId"`

	NotifyCorrelationId string `json:"notifyCorrelationId,omitempty"`

	MaxReports int32 `json:"maxReports,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	Expiry time.Time `json:"expiry,omitempty"`

	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures string `json:"supportedFeatures,omitempty" validate:"regexp=^[A-Fa-f0-9]*$"`
}

// AssertSacEventSubscriptionRequired checks if the required fields are not zero-ed
func AssertSacEventSubscriptionRequired(obj SacEventSubscription) error {
	elements := map[string]interface{}{
		"event": obj.Event,
		"eventNotifyUri": obj.EventNotifyUri,
		"nfId": obj.NfId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSacEventRequired(obj.Event); err != nil {
		return err
	}
	return nil
}

// AssertSacEventSubscriptionConstraints checks if the values respects the defined constraints
func AssertSacEventSubscriptionConstraints(obj SacEventSubscription) error {
	if err := AssertSacEventConstraints(obj.Event); err != nil {
		return err
	}
	return nil
}
