// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// PcscfInfo - Information of a P-CSCF NF Instance
type PcscfInfo struct {

	AccessType []AccessType `json:"accessType,omitempty"`

	DnnList []string `json:"dnnList,omitempty"`

	// Fully Qualified Domain Name
	GmFqdn string `json:"gmFqdn,omitempty" validate:"regexp=^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\\\\.)+[A-Za-z]{2,63}\\\\.?$"`

	GmIpv4Addresses []string `json:"gmIpv4Addresses,omitempty"`

	GmIpv6Addresses []Ipv6Addr `json:"gmIpv6Addresses,omitempty"`

	// Fully Qualified Domain Name
	MwFqdn string `json:"mwFqdn,omitempty" validate:"regexp=^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\\\\.)+[A-Za-z]{2,63}\\\\.?$"`

	MwIpv4Addresses []string `json:"mwIpv4Addresses,omitempty"`

	MwIpv6Addresses []Ipv6Addr `json:"mwIpv6Addresses,omitempty"`

	ServedIpv4AddressRanges []Ipv4AddressRange `json:"servedIpv4AddressRanges,omitempty"`

	ServedIpv6PrefixRanges []Ipv6PrefixRange `json:"servedIpv6PrefixRanges,omitempty"`
}

// AssertPcscfInfoRequired checks if the required fields are not zero-ed
func AssertPcscfInfoRequired(obj PcscfInfo) error {
	for _, el := range obj.GmIpv6Addresses {
		if err := AssertIpv6AddrRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MwIpv6Addresses {
		if err := AssertIpv6AddrRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServedIpv4AddressRanges {
		if err := AssertIpv4AddressRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServedIpv6PrefixRanges {
		if err := AssertIpv6PrefixRangeRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertPcscfInfoConstraints checks if the values respects the defined constraints
func AssertPcscfInfoConstraints(obj PcscfInfo) error {
	for _, el := range obj.GmIpv6Addresses {
		if err := AssertIpv6AddrConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MwIpv6Addresses {
		if err := AssertIpv6AddrConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServedIpv4AddressRanges {
		if err := AssertIpv4AddressRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServedIpv6PrefixRanges {
		if err := AssertIpv6PrefixRangeConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
