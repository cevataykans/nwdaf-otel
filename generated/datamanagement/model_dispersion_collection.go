// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"errors"
)



// DispersionCollection - Dispersion collection per UE location or per slice.
type DispersionCollection struct {

	UeLoc UserLocation `json:"ueLoc,omitempty"`

	Snssai Snssai `json:"snssai,omitempty"`

	Supis []string `json:"supis,omitempty"`

	Gpsis []string `json:"gpsis,omitempty"`

	AppVolumes []ApplicationVolume `json:"appVolumes,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	DisperAmount int32 `json:"disperAmount,omitempty"`

	DisperClass DispersionClass `json:"disperClass,omitempty"`

	// Integer where the allowed values correspond to 1, 2, 3 only.
	UsageRank int32 `json:"usageRank,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	PercentileRank int32 `json:"percentileRank,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	UeRatio int32 `json:"ueRatio,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`
}

// AssertDispersionCollectionRequired checks if the required fields are not zero-ed
func AssertDispersionCollectionRequired(obj DispersionCollection) error {
	if err := AssertUserLocationRequired(obj.UeLoc); err != nil {
		return err
	}
	if err := AssertSnssaiRequired(obj.Snssai); err != nil {
		return err
	}
	for _, el := range obj.AppVolumes {
		if err := AssertApplicationVolumeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertDispersionClassRequired(obj.DisperClass); err != nil {
		return err
	}
	return nil
}

// AssertDispersionCollectionConstraints checks if the values respects the defined constraints
func AssertDispersionCollectionConstraints(obj DispersionCollection) error {
	if err := AssertUserLocationConstraints(obj.UeLoc); err != nil {
		return err
	}
	if err := AssertSnssaiConstraints(obj.Snssai); err != nil {
		return err
	}
	for _, el := range obj.AppVolumes {
		if err := AssertApplicationVolumeConstraints(el); err != nil {
			return err
		}
	}
	if obj.DisperAmount < 0 {
		return &ParsingError{Param: "DisperAmount", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertDispersionClassConstraints(obj.DisperClass); err != nil {
		return err
	}
	if obj.UsageRank < 1 {
		return &ParsingError{Param: "UsageRank", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.UsageRank > 3 {
		return &ParsingError{Param: "UsageRank", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.PercentileRank < 1 {
		return &ParsingError{Param: "PercentileRank", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PercentileRank > 100 {
		return &ParsingError{Param: "PercentileRank", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.UeRatio < 1 {
		return &ParsingError{Param: "UeRatio", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.UeRatio > 100 {
		return &ParsingError{Param: "UeRatio", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Confidence < 0 {
		return &ParsingError{Param: "Confidence", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
