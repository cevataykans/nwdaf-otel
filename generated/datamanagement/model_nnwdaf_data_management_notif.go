// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// NnwdafDataManagementNotif - Represents an Individual Notification.
type NnwdafDataManagementNotif struct {

	DataNotification *DataNotification `json:"dataNotification,omitempty"`

	// List of summary reports of processed notifications.
	DataReports []NotifSummaryReport `json:"dataReports,omitempty"`

	// Notification correlation identifier.
	NotifCorrId string `json:"notifCorrId"`

	// It indicates that the termination of the data management subscription is requested by the NWDAF. 
	TerminationReq string `json:"terminationReq,omitempty"`

	FetchInstruct FetchInstruction `json:"fetchInstruct,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	NotifTimestamp time.Time `json:"notifTimestamp"`
}

// AssertNnwdafDataManagementNotifRequired checks if the required fields are not zero-ed
func AssertNnwdafDataManagementNotifRequired(obj NnwdafDataManagementNotif) error {
	elements := map[string]interface{}{
		"notifCorrId": obj.NotifCorrId,
		"notifTimestamp": obj.NotifTimestamp,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.DataNotification != nil {
		if err := AssertDataNotificationRequired(*obj.DataNotification); err != nil {
			return err
		}
	}
	for _, el := range obj.DataReports {
		if err := AssertNotifSummaryReportRequired(el); err != nil {
			return err
		}
	}
	if err := AssertFetchInstructionRequired(obj.FetchInstruct); err != nil {
		return err
	}
	return nil
}

// AssertNnwdafDataManagementNotifConstraints checks if the values respects the defined constraints
func AssertNnwdafDataManagementNotifConstraints(obj NnwdafDataManagementNotif) error {
    if obj.DataNotification != nil {
     	if err := AssertDataNotificationConstraints(*obj.DataNotification); err != nil {
     		return err
     	}
    }
	for _, el := range obj.DataReports {
		if err := AssertNotifSummaryReportConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertFetchInstructionConstraints(obj.FetchInstruct); err != nil {
		return err
	}
	return nil
}
