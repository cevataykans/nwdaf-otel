// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// PcfInfo - Information of a PCF NF Instance
type PcfInfo struct {

	// Identifier of a group of NFs.
	GroupId string `json:"groupId,omitempty"`

	DnnList []string `json:"dnnList,omitempty"`

	SupiRanges []SupiRange `json:"supiRanges,omitempty"`

	GpsiRanges []IdentityRange `json:"gpsiRanges,omitempty"`

	// Fully Qualified Domain Name
	RxDiamHost string `json:"rxDiamHost,omitempty" validate:"regexp=^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\\\\.)+[A-Za-z]{2,63}\\\\.?$"`

	// Fully Qualified Domain Name
	RxDiamRealm string `json:"rxDiamRealm,omitempty" validate:"regexp=^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\\\\.)+[A-Za-z]{2,63}\\\\.?$"`

	V2xSupportInd bool `json:"v2xSupportInd,omitempty"`

	ProseSupportInd bool `json:"proseSupportInd,omitempty"`

	ProseCapability ProSeCapability `json:"proseCapability,omitempty"`

	V2xCapability V2xCapability `json:"v2xCapability,omitempty"`
}

// AssertPcfInfoRequired checks if the required fields are not zero-ed
func AssertPcfInfoRequired(obj PcfInfo) error {
	for _, el := range obj.SupiRanges {
		if err := AssertSupiRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertProSeCapabilityRequired(obj.ProseCapability); err != nil {
		return err
	}
	if err := AssertV2xCapabilityRequired(obj.V2xCapability); err != nil {
		return err
	}
	return nil
}

// AssertPcfInfoConstraints checks if the values respects the defined constraints
func AssertPcfInfoConstraints(obj PcfInfo) error {
	for _, el := range obj.SupiRanges {
		if err := AssertSupiRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertProSeCapabilityConstraints(obj.ProseCapability); err != nil {
		return err
	}
	if err := AssertV2xCapabilityConstraints(obj.V2xCapability); err != nil {
		return err
	}
	return nil
}
