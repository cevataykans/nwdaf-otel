// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// HssInfo - Information of an HSS NF Instance
type HssInfo struct {

	// Identifier of a group of NFs.
	GroupId string `json:"groupId,omitempty"`

	ImsiRanges []ImsiRange `json:"imsiRanges,omitempty"`

	ImsPrivateIdentityRanges []IdentityRange `json:"imsPrivateIdentityRanges,omitempty"`

	ImsPublicIdentityRanges []IdentityRange `json:"imsPublicIdentityRanges,omitempty"`

	MsisdnRanges []IdentityRange `json:"msisdnRanges,omitempty"`

	ExternalGroupIdentifiersRanges []IdentityRange `json:"externalGroupIdentifiersRanges,omitempty"`

	HssDiameterAddress NetworkNodeDiameterAddress `json:"hssDiameterAddress,omitempty"`
}

// AssertHssInfoRequired checks if the required fields are not zero-ed
func AssertHssInfoRequired(obj HssInfo) error {
	for _, el := range obj.ImsiRanges {
		if err := AssertImsiRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ImsPrivateIdentityRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ImsPublicIdentityRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsisdnRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExternalGroupIdentifiersRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertNetworkNodeDiameterAddressRequired(obj.HssDiameterAddress); err != nil {
		return err
	}
	return nil
}

// AssertHssInfoConstraints checks if the values respects the defined constraints
func AssertHssInfoConstraints(obj HssInfo) error {
	for _, el := range obj.ImsiRanges {
		if err := AssertImsiRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ImsPrivateIdentityRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ImsPublicIdentityRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsisdnRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExternalGroupIdentifiersRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertNetworkNodeDiameterAddressConstraints(obj.HssDiameterAddress); err != nil {
		return err
	}
	return nil
}
