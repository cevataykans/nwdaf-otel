// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"errors"
)



type MonitoringConfiguration struct {

	EventType EventType `json:"eventType"`

	ImmediateFlag bool `json:"immediateFlag,omitempty"`

	LocationReportingConfiguration LocationReportingConfiguration `json:"locationReportingConfiguration,omitempty"`

	AssociationType AssociationType `json:"associationType,omitempty"`

	DatalinkReportCfg DatalinkReportingConfiguration `json:"datalinkReportCfg,omitempty"`

	LossConnectivityCfg LossConnectivityCfg `json:"lossConnectivityCfg,omitempty"`

	// indicating a time in seconds.
	MaximumLatency int32 `json:"maximumLatency,omitempty"`

	// indicating a time in seconds.
	MaximumResponseTime int32 `json:"maximumResponseTime,omitempty"`

	SuggestedPacketNumDl int32 `json:"suggestedPacketNumDl,omitempty"`

	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\"). 
	Dnn string `json:"dnn,omitempty"`

	SingleNssai Snssai `json:"singleNssai,omitempty"`

	PduSessionStatusCfg PduSessionStatusCfg `json:"pduSessionStatusCfg,omitempty"`

	ReachabilityForSmsCfg ReachabilityForSmsConfiguration `json:"reachabilityForSmsCfg,omitempty"`

	// String uniquely identifying MTC provider information.
	MtcProviderInformation string `json:"mtcProviderInformation,omitempty"`

	AfId string `json:"afId,omitempty"`

	ReachabilityForDataCfg ReachabilityForDataConfiguration `json:"reachabilityForDataCfg,omitempty"`

	IdleStatusInd bool `json:"idleStatusInd,omitempty"`
}

// AssertMonitoringConfigurationRequired checks if the required fields are not zero-ed
func AssertMonitoringConfigurationRequired(obj MonitoringConfiguration) error {
	elements := map[string]interface{}{
		"eventType": obj.EventType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertEventTypeRequired(obj.EventType); err != nil {
		return err
	}
	if err := AssertLocationReportingConfigurationRequired(obj.LocationReportingConfiguration); err != nil {
		return err
	}
	if err := AssertAssociationTypeRequired(obj.AssociationType); err != nil {
		return err
	}
	if err := AssertDatalinkReportingConfigurationRequired(obj.DatalinkReportCfg); err != nil {
		return err
	}
	if err := AssertLossConnectivityCfgRequired(obj.LossConnectivityCfg); err != nil {
		return err
	}
	if err := AssertSnssaiRequired(obj.SingleNssai); err != nil {
		return err
	}
	if err := AssertPduSessionStatusCfgRequired(obj.PduSessionStatusCfg); err != nil {
		return err
	}
	if err := AssertReachabilityForSmsConfigurationRequired(obj.ReachabilityForSmsCfg); err != nil {
		return err
	}
	if err := AssertReachabilityForDataConfigurationRequired(obj.ReachabilityForDataCfg); err != nil {
		return err
	}
	return nil
}

// AssertMonitoringConfigurationConstraints checks if the values respects the defined constraints
func AssertMonitoringConfigurationConstraints(obj MonitoringConfiguration) error {
	if err := AssertEventTypeConstraints(obj.EventType); err != nil {
		return err
	}
	if err := AssertLocationReportingConfigurationConstraints(obj.LocationReportingConfiguration); err != nil {
		return err
	}
	if err := AssertAssociationTypeConstraints(obj.AssociationType); err != nil {
		return err
	}
	if err := AssertDatalinkReportingConfigurationConstraints(obj.DatalinkReportCfg); err != nil {
		return err
	}
	if err := AssertLossConnectivityCfgConstraints(obj.LossConnectivityCfg); err != nil {
		return err
	}
	if obj.SuggestedPacketNumDl < 1 {
		return &ParsingError{Param: "SuggestedPacketNumDl", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertSnssaiConstraints(obj.SingleNssai); err != nil {
		return err
	}
	if err := AssertPduSessionStatusCfgConstraints(obj.PduSessionStatusCfg); err != nil {
		return err
	}
	if err := AssertReachabilityForSmsConfigurationConstraints(obj.ReachabilityForSmsCfg); err != nil {
		return err
	}
	if err := AssertReachabilityForDataConfigurationConstraints(obj.ReachabilityForDataCfg); err != nil {
		return err
	}
	return nil
}
