// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"errors"
)



// EventSubscription - Represents a subscription to a single event.
type EventSubscription struct {

	// \"false\" represents not applicable for all slices. \"true\" represents applicable for all slices. 
	AnySlice bool `json:"anySlice,omitempty"`

	// Identification(s) of application to which the subscription applies.
	AppIds []string `json:"appIds,omitempty"`

	// Identification(s) of DNN to which the subscription applies.
	Dnns []string `json:"dnns,omitempty"`

	Dnais []string `json:"dnais,omitempty"`

	Event NwdafEvent `json:"event"`

	ExtraReportReq EventReportingRequirement `json:"extraReportReq,omitempty"`

	// Identification(s) of LADN DNN to indicate the LADN service area as the AOI.
	LadnDnns []string `json:"ladnDnns,omitempty"`

	// Indicates that the NWDAF shall report the corresponding network slice load level to the NF  service consumer where the load level of the network slice identified by snssais is  reached. 
	LoadLevelThreshold int32 `json:"loadLevelThreshold,omitempty"`

	NotificationMethod NotificationMethod `json:"notificationMethod,omitempty"`

	MatchingDir MatchingDirection `json:"matchingDir,omitempty"`

	// Shall be supplied in order to start reporting when an average load level is reached. 
	NfLoadLvlThds []ThresholdLevel `json:"nfLoadLvlThds,omitempty"`

	NfInstanceIds []string `json:"nfInstanceIds,omitempty"`

	NfSetIds []string `json:"nfSetIds,omitempty"`

	NfTypes []NfType `json:"nfTypes,omitempty"`

	NetworkArea NetworkAreaInfo `json:"networkArea,omitempty"`

	VisitedAreas []NetworkAreaInfo `json:"visitedAreas,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	MaxTopAppUlNbr int32 `json:"maxTopAppUlNbr,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	MaxTopAppDlNbr int32 `json:"maxTopAppDlNbr,omitempty"`

	NsiIdInfos []NsiIdInfo `json:"nsiIdInfos,omitempty"`

	NsiLevelThrds []int32 `json:"nsiLevelThrds,omitempty"`

	QosRequ *QosRequirement `json:"qosRequ,omitempty"`

	QosFlowRetThds []RetainabilityThreshold `json:"qosFlowRetThds,omitempty"`

	RanUeThrouThds []string `json:"ranUeThrouThds,omitempty"`

	// indicating a time in seconds.
	RepetitionPeriod int32 `json:"repetitionPeriod,omitempty"`

	// Identification(s) of network slice to which the subscription applies. It corresponds to  snssais in the data model definition of 3GPP TS 29.520.  
	Snssaia []Snssai `json:"snssaia,omitempty"`

	TgtUe TargetUeInformation `json:"tgtUe,omitempty"`

	CongThresholds []ThresholdLevel `json:"congThresholds,omitempty"`

	NwPerfRequs []NetworkPerfRequirement `json:"nwPerfRequs,omitempty"`

	BwRequs []BwRequirement `json:"bwRequs,omitempty"`

	ExcepRequs []Exception `json:"excepRequs,omitempty"`

	ExptAnaType ExpectedAnalyticsType `json:"exptAnaType,omitempty"`

	ExptUeBehav ExpectedUeBehaviourData `json:"exptUeBehav,omitempty"`

	RatFreqs []RatFreqInformation `json:"ratFreqs,omitempty"`

	ListOfAnaSubsets []AnalyticsSubset `json:"listOfAnaSubsets,omitempty"`

	DisperReqs []DispersionRequirement `json:"disperReqs,omitempty"`

	RedTransReqs []RedundantTransmissionExpReq `json:"redTransReqs,omitempty"`

	WlanReqs []WlanPerformanceReq `json:"wlanReqs,omitempty"`

	UpfInfo UpfInformation `json:"upfInfo,omitempty"`

	AppServerAddrs []AddrFqdn `json:"appServerAddrs,omitempty"`

	DnPerfReqs []DnPerformanceReq `json:"dnPerfReqs,omitempty"`
}

// AssertEventSubscriptionRequired checks if the required fields are not zero-ed
func AssertEventSubscriptionRequired(obj EventSubscription) error {
	elements := map[string]interface{}{
		"event": obj.Event,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNwdafEventRequired(obj.Event); err != nil {
		return err
	}
	if err := AssertEventReportingRequirementRequired(obj.ExtraReportReq); err != nil {
		return err
	}
	if err := AssertNotificationMethodRequired(obj.NotificationMethod); err != nil {
		return err
	}
	if err := AssertMatchingDirectionRequired(obj.MatchingDir); err != nil {
		return err
	}
	for _, el := range obj.NfLoadLvlThds {
		if err := AssertThresholdLevelRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NfTypes {
		if err := AssertNfTypeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertNetworkAreaInfoRequired(obj.NetworkArea); err != nil {
		return err
	}
	for _, el := range obj.VisitedAreas {
		if err := AssertNetworkAreaInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NsiIdInfos {
		if err := AssertNsiIdInfoRequired(el); err != nil {
			return err
		}
	}
	if obj.QosRequ != nil {
		if err := AssertQosRequirementRequired(*obj.QosRequ); err != nil {
			return err
		}
	}
	for _, el := range obj.QosFlowRetThds {
		if err := AssertRetainabilityThresholdRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Snssaia {
		if err := AssertSnssaiRequired(el); err != nil {
			return err
		}
	}
	if err := AssertTargetUeInformationRequired(obj.TgtUe); err != nil {
		return err
	}
	for _, el := range obj.CongThresholds {
		if err := AssertThresholdLevelRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NwPerfRequs {
		if err := AssertNetworkPerfRequirementRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.BwRequs {
		if err := AssertBwRequirementRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExcepRequs {
		if err := AssertExceptionRequired(el); err != nil {
			return err
		}
	}
	if err := AssertExpectedAnalyticsTypeRequired(obj.ExptAnaType); err != nil {
		return err
	}
	if err := AssertExpectedUeBehaviourDataRequired(obj.ExptUeBehav); err != nil {
		return err
	}
	for _, el := range obj.RatFreqs {
		if err := AssertRatFreqInformationRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ListOfAnaSubsets {
		if err := AssertAnalyticsSubsetRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DisperReqs {
		if err := AssertDispersionRequirementRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RedTransReqs {
		if err := AssertRedundantTransmissionExpReqRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.WlanReqs {
		if err := AssertWlanPerformanceReqRequired(el); err != nil {
			return err
		}
	}
	if err := AssertUpfInformationRequired(obj.UpfInfo); err != nil {
		return err
	}
	for _, el := range obj.AppServerAddrs {
		if err := AssertAddrFqdnRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DnPerfReqs {
		if err := AssertDnPerformanceReqRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertEventSubscriptionConstraints checks if the values respects the defined constraints
func AssertEventSubscriptionConstraints(obj EventSubscription) error {
	if err := AssertNwdafEventConstraints(obj.Event); err != nil {
		return err
	}
	if err := AssertEventReportingRequirementConstraints(obj.ExtraReportReq); err != nil {
		return err
	}
	if err := AssertNotificationMethodConstraints(obj.NotificationMethod); err != nil {
		return err
	}
	if err := AssertMatchingDirectionConstraints(obj.MatchingDir); err != nil {
		return err
	}
	for _, el := range obj.NfLoadLvlThds {
		if err := AssertThresholdLevelConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NfTypes {
		if err := AssertNfTypeConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertNetworkAreaInfoConstraints(obj.NetworkArea); err != nil {
		return err
	}
	for _, el := range obj.VisitedAreas {
		if err := AssertNetworkAreaInfoConstraints(el); err != nil {
			return err
		}
	}
	if obj.MaxTopAppUlNbr < 0 {
		return &ParsingError{Param: "MaxTopAppUlNbr", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.MaxTopAppDlNbr < 0 {
		return &ParsingError{Param: "MaxTopAppDlNbr", Err: errors.New(errMsgMinValueConstraint)}
	}
	for _, el := range obj.NsiIdInfos {
		if err := AssertNsiIdInfoConstraints(el); err != nil {
			return err
		}
	}
    if obj.QosRequ != nil {
     	if err := AssertQosRequirementConstraints(*obj.QosRequ); err != nil {
     		return err
     	}
    }
	for _, el := range obj.QosFlowRetThds {
		if err := AssertRetainabilityThresholdConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Snssaia {
		if err := AssertSnssaiConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertTargetUeInformationConstraints(obj.TgtUe); err != nil {
		return err
	}
	for _, el := range obj.CongThresholds {
		if err := AssertThresholdLevelConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NwPerfRequs {
		if err := AssertNetworkPerfRequirementConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.BwRequs {
		if err := AssertBwRequirementConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExcepRequs {
		if err := AssertExceptionConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertExpectedAnalyticsTypeConstraints(obj.ExptAnaType); err != nil {
		return err
	}
	if err := AssertExpectedUeBehaviourDataConstraints(obj.ExptUeBehav); err != nil {
		return err
	}
	for _, el := range obj.RatFreqs {
		if err := AssertRatFreqInformationConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ListOfAnaSubsets {
		if err := AssertAnalyticsSubsetConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DisperReqs {
		if err := AssertDispersionRequirementConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RedTransReqs {
		if err := AssertRedundantTransmissionExpReqConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.WlanReqs {
		if err := AssertWlanPerformanceReqConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertUpfInformationConstraints(obj.UpfInfo); err != nil {
		return err
	}
	for _, el := range obj.AppServerAddrs {
		if err := AssertAddrFqdnConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DnPerfReqs {
		if err := AssertDnPerformanceReqConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
