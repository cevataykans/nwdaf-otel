// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"errors"
)



type MediaStreamingAccessRecordAllOfRequestMessage struct {

	Method string `json:"method"`

	// Absolute Uniform Resource Locator, conforming with the \"absolute-URI\" production specified in IETF RFC 3986, section 4.3 in which the scheme part is \"http\" or \"https\". Note that the \"query\" suffix is permitted by this production but the \"fragment\" suffix is not.
	Url string `json:"url"`

	ProtocolVersion string `json:"protocolVersion"`

	Range string `json:"range,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Size int32 `json:"size"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	BodySize int32 `json:"bodySize"`

	ContentType string `json:"contentType,omitempty"`

	UserAgent string `json:"userAgent,omitempty"`

	UserIdentity string `json:"userIdentity,omitempty"`

	// Absolute Uniform Resource Locator, conforming with the \"absolute-URI\" production specified in IETF RFC 3986, section 4.3 in which the scheme part is \"http\" or \"https\". Note that the \"query\" suffix is permitted by this production but the \"fragment\" suffix is not.
	Referer string `json:"referer,omitempty"`
}

// AssertMediaStreamingAccessRecordAllOfRequestMessageRequired checks if the required fields are not zero-ed
func AssertMediaStreamingAccessRecordAllOfRequestMessageRequired(obj MediaStreamingAccessRecordAllOfRequestMessage) error {
	elements := map[string]interface{}{
		"method": obj.Method,
		"url": obj.Url,
		"protocolVersion": obj.ProtocolVersion,
		"size": obj.Size,
		"bodySize": obj.BodySize,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertMediaStreamingAccessRecordAllOfRequestMessageConstraints checks if the values respects the defined constraints
func AssertMediaStreamingAccessRecordAllOfRequestMessageConstraints(obj MediaStreamingAccessRecordAllOfRequestMessage) error {
	if obj.Size < 0 {
		return &ParsingError{Param: "Size", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.BodySize < 0 {
		return &ParsingError{Param: "BodySize", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
