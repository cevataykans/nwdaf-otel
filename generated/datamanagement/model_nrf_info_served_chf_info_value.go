// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




type NrfInfoServedChfInfoValue struct {

	SupiRangeList []SupiRange `json:"supiRangeList,omitempty"`

	GpsiRangeList []IdentityRange `json:"gpsiRangeList,omitempty"`

	PlmnRangeList []PlmnRange `json:"plmnRangeList,omitempty"`

	// Identifier of a group of NFs.
	GroupId string `json:"groupId,omitempty"`

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	PrimaryChfInstance string `json:"primaryChfInstance,omitempty"`

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	SecondaryChfInstance string `json:"secondaryChfInstance,omitempty"`
}

// AssertNrfInfoServedChfInfoValueRequired checks if the required fields are not zero-ed
func AssertNrfInfoServedChfInfoValueRequired(obj NrfInfoServedChfInfoValue) error {
	for _, el := range obj.SupiRangeList {
		if err := AssertSupiRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GpsiRangeList {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PlmnRangeList {
		if err := AssertPlmnRangeRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertNrfInfoServedChfInfoValueConstraints checks if the values respects the defined constraints
func AssertNrfInfoServedChfInfoValueConstraints(obj NrfInfoServedChfInfoValue) error {
	for _, el := range obj.SupiRangeList {
		if err := AssertSupiRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GpsiRangeList {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PlmnRangeList {
		if err := AssertPlmnRangeConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
