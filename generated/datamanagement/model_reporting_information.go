// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"time"
	"errors"
)



// ReportingInformation - Represents the type of reporting that the subscription requires.
type ReportingInformation struct {

	ImmRep bool `json:"immRep,omitempty"`

	NotifMethod NotificationMethod1 `json:"notifMethod,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	MaxReportNbr int32 `json:"maxReportNbr,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	MonDur time.Time `json:"monDur,omitempty"`

	// indicating a time in seconds.
	RepPeriod int32 `json:"repPeriod,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	SampRatio int32 `json:"sampRatio,omitempty"`

	// Criteria for partitioning the UEs before applying the sampling ratio.
	PartitionCriteria []PartitioningCriteria `json:"partitionCriteria,omitempty"`

	// indicating a time in seconds.
	GrpRepTime int32 `json:"grpRepTime,omitempty"`

	NotifFlag NotificationFlag `json:"notifFlag,omitempty"`
}

// AssertReportingInformationRequired checks if the required fields are not zero-ed
func AssertReportingInformationRequired(obj ReportingInformation) error {
	if err := AssertNotificationMethod1Required(obj.NotifMethod); err != nil {
		return err
	}
	for _, el := range obj.PartitionCriteria {
		if err := AssertPartitioningCriteriaRequired(el); err != nil {
			return err
		}
	}
	if err := AssertNotificationFlagRequired(obj.NotifFlag); err != nil {
		return err
	}
	return nil
}

// AssertReportingInformationConstraints checks if the values respects the defined constraints
func AssertReportingInformationConstraints(obj ReportingInformation) error {
	if err := AssertNotificationMethod1Constraints(obj.NotifMethod); err != nil {
		return err
	}
	if obj.MaxReportNbr < 0 {
		return &ParsingError{Param: "MaxReportNbr", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.SampRatio < 1 {
		return &ParsingError{Param: "SampRatio", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.SampRatio > 100 {
		return &ParsingError{Param: "SampRatio", Err: errors.New(errMsgMaxValueConstraint)}
	}
	for _, el := range obj.PartitionCriteria {
		if err := AssertPartitioningCriteriaConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertNotificationFlagConstraints(obj.NotifFlag); err != nil {
		return err
	}
	return nil
}
