// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"errors"
)



// UpfInfo - Information of an UPF NF Instance
type UpfInfo struct {

	SNssaiUpfInfoList []SnssaiUpfInfoItem `json:"sNssaiUpfInfoList"`

	SmfServingArea []string `json:"smfServingArea,omitempty"`

	InterfaceUpfInfoList []InterfaceUpfInfoItem `json:"interfaceUpfInfoList,omitempty"`

	IwkEpsInd bool `json:"iwkEpsInd,omitempty"`

	PduSessionTypes []PduSessionType `json:"pduSessionTypes,omitempty"`

	AtsssCapability AtsssCapability `json:"atsssCapability,omitempty"`

	UeIpAddrInd bool `json:"ueIpAddrInd,omitempty"`

	TaiList []Tai `json:"taiList,omitempty"`

	TaiRangeList []TaiRange `json:"taiRangeList,omitempty"`

	WAgfInfo WAgfInfo `json:"wAgfInfo,omitempty"`

	TngfInfo TngfInfo `json:"tngfInfo,omitempty"`

	TwifInfo TwifInfo `json:"twifInfo,omitempty"`

	Priority int32 `json:"priority,omitempty"`

	RedundantGtpu bool `json:"redundantGtpu,omitempty"`

	Ipups bool `json:"ipups,omitempty"`

	DataForwarding bool `json:"dataForwarding,omitempty"`

	SupportedPfcpFeatures string `json:"supportedPfcpFeatures,omitempty"`
}

// AssertUpfInfoRequired checks if the required fields are not zero-ed
func AssertUpfInfoRequired(obj UpfInfo) error {
	elements := map[string]interface{}{
		"sNssaiUpfInfoList": obj.SNssaiUpfInfoList,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.SNssaiUpfInfoList {
		if err := AssertSnssaiUpfInfoItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InterfaceUpfInfoList {
		if err := AssertInterfaceUpfInfoItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PduSessionTypes {
		if err := AssertPduSessionTypeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertAtsssCapabilityRequired(obj.AtsssCapability); err != nil {
		return err
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertWAgfInfoRequired(obj.WAgfInfo); err != nil {
		return err
	}
	if err := AssertTngfInfoRequired(obj.TngfInfo); err != nil {
		return err
	}
	if err := AssertTwifInfoRequired(obj.TwifInfo); err != nil {
		return err
	}
	return nil
}

// AssertUpfInfoConstraints checks if the values respects the defined constraints
func AssertUpfInfoConstraints(obj UpfInfo) error {
	for _, el := range obj.SNssaiUpfInfoList {
		if err := AssertSnssaiUpfInfoItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InterfaceUpfInfoList {
		if err := AssertInterfaceUpfInfoItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PduSessionTypes {
		if err := AssertPduSessionTypeConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertAtsssCapabilityConstraints(obj.AtsssCapability); err != nil {
		return err
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertWAgfInfoConstraints(obj.WAgfInfo); err != nil {
		return err
	}
	if err := AssertTngfInfoConstraints(obj.TngfInfo); err != nil {
		return err
	}
	if err := AssertTwifInfoConstraints(obj.TwifInfo); err != nil {
		return err
	}
	if obj.Priority < 0 {
		return &ParsingError{Param: "Priority", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Priority > 65535 {
		return &ParsingError{Param: "Priority", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
