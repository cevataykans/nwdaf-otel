// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"time"
)



// AdditionalMeasurement - Represents additional measurement information.
type AdditionalMeasurement struct {

	UnexpLoc NetworkAreaInfo `json:"unexpLoc,omitempty"`

	UnexpFlowTeps []IpEthFlowDescription `json:"unexpFlowTeps,omitempty"`

	UnexpWakes []time.Time `json:"unexpWakes,omitempty"`

	DdosAttack AddressList `json:"ddosAttack,omitempty"`

	WrgDest AddressList `json:"wrgDest,omitempty"`

	Circums []CircumstanceDescription `json:"circums,omitempty"`
}

// AssertAdditionalMeasurementRequired checks if the required fields are not zero-ed
func AssertAdditionalMeasurementRequired(obj AdditionalMeasurement) error {
	if err := AssertNetworkAreaInfoRequired(obj.UnexpLoc); err != nil {
		return err
	}
	for _, el := range obj.UnexpFlowTeps {
		if err := AssertIpEthFlowDescriptionRequired(el); err != nil {
			return err
		}
	}
	if err := AssertAddressListRequired(obj.DdosAttack); err != nil {
		return err
	}
	if err := AssertAddressListRequired(obj.WrgDest); err != nil {
		return err
	}
	for _, el := range obj.Circums {
		if err := AssertCircumstanceDescriptionRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertAdditionalMeasurementConstraints checks if the values respects the defined constraints
func AssertAdditionalMeasurementConstraints(obj AdditionalMeasurement) error {
	if err := AssertNetworkAreaInfoConstraints(obj.UnexpLoc); err != nil {
		return err
	}
	for _, el := range obj.UnexpFlowTeps {
		if err := AssertIpEthFlowDescriptionConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertAddressListConstraints(obj.DdosAttack); err != nil {
		return err
	}
	if err := AssertAddressListConstraints(obj.WrgDest); err != nil {
		return err
	}
	for _, el := range obj.Circums {
		if err := AssertCircumstanceDescriptionConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
