// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"errors"
)



// IpEndPoint - IP addressing information of a given NFService; it consists on, e.g. IP address, TCP port, transport protocol... 
type IpEndPoint struct {

	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166. 
	Ipv4Address string `json:"ipv4Address,omitempty" validate:"regexp=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`

	Ipv6Address Ipv6Addr `json:"ipv6Address,omitempty"`

	Transport TransportProtocol1 `json:"transport,omitempty"`

	Port int32 `json:"port,omitempty"`
}

// AssertIpEndPointRequired checks if the required fields are not zero-ed
func AssertIpEndPointRequired(obj IpEndPoint) error {
	if err := AssertIpv6AddrRequired(obj.Ipv6Address); err != nil {
		return err
	}
	if err := AssertTransportProtocol1Required(obj.Transport); err != nil {
		return err
	}
	return nil
}

// AssertIpEndPointConstraints checks if the values respects the defined constraints
func AssertIpEndPointConstraints(obj IpEndPoint) error {
	if err := AssertIpv6AddrConstraints(obj.Ipv6Address); err != nil {
		return err
	}
	if err := AssertTransportProtocol1Constraints(obj.Transport); err != nil {
		return err
	}
	if obj.Port < 0 {
		return &ParsingError{Param: "Port", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Port > 65535 {
		return &ParsingError{Param: "Port", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
