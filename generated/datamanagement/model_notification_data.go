// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// NotificationData - Data sent in notifications from NRF to subscribed NF Instances
type NotificationData struct {

	Event NotificationEventType `json:"event"`

	// String providing an URI formatted according to RFC 3986.
	NfInstanceUri string `json:"nfInstanceUri"`

	NfProfile NfProfile `json:"nfProfile,omitempty"`

	ProfileChanges []ChangeItem `json:"profileChanges,omitempty"`

	ConditionEvent ConditionEventType `json:"conditionEvent,omitempty"`

	SubscriptionContext SubscriptionContext `json:"subscriptionContext,omitempty"`
}

// AssertNotificationDataRequired checks if the required fields are not zero-ed
func AssertNotificationDataRequired(obj NotificationData) error {
	elements := map[string]interface{}{
		"event": obj.Event,
		"nfInstanceUri": obj.NfInstanceUri,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNotificationEventTypeRequired(obj.Event); err != nil {
		return err
	}
	if err := AssertNFProfileRequired(obj.NfProfile); err != nil {
		return err
	}
	for _, el := range obj.ProfileChanges {
		if err := AssertChangeItemRequired(el); err != nil {
			return err
		}
	}
	if err := AssertConditionEventTypeRequired(obj.ConditionEvent); err != nil {
		return err
	}
	if err := AssertSubscriptionContextRequired(obj.SubscriptionContext); err != nil {
		return err
	}
	return nil
}

// AssertNotificationDataConstraints checks if the values respects the defined constraints
func AssertNotificationDataConstraints(obj NotificationData) error {
	if err := AssertNotificationEventTypeConstraints(obj.Event); err != nil {
		return err
	}
	if err := AssertNFProfileConstraints(obj.NfProfile); err != nil {
		return err
	}
	for _, el := range obj.ProfileChanges {
		if err := AssertChangeItemConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertConditionEventTypeConstraints(obj.ConditionEvent); err != nil {
		return err
	}
	if err := AssertSubscriptionContextConstraints(obj.SubscriptionContext); err != nil {
		return err
	}
	return nil
}
