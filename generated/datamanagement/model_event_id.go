// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"fmt"
)


// EventId : This string provides forward-compatibility with future extensions to the enumeration but is not used to encode content defined in the present version of this API. 
type EventId string

// List of EventId
const (
	LOAD_LEVEL_INFORMATION EventId = "LOAD_LEVEL_INFORMATION"
	NETWORK_PERFORMANCE EventId = "NETWORK_PERFORMANCE"
	NF_LOAD EventId = "NF_LOAD"
	SERVICE_EXPERIENCE EventId = "SERVICE_EXPERIENCE"
	UE_MOBILITY EventId = "UE_MOBILITY"
	UE_COMMUNICATION EventId = "UE_COMMUNICATION"
	QOS_SUSTAINABILITY EventId = "QOS_SUSTAINABILITY"
	ABNORMAL_BEHAVIOUR EventId = "ABNORMAL_BEHAVIOUR"
	USER_DATA_CONGESTION EventId = "USER_DATA_CONGESTION"
	NSI_LOAD_LEVEL EventId = "NSI_LOAD_LEVEL"
	SM_CONGESTION EventId = "SM_CONGESTION"
	DISPERSION EventId = "DISPERSION"
	RED_TRANS_EXP EventId = "RED_TRANS_EXP"
	WLAN_PERFORMANCE EventId = "WLAN_PERFORMANCE"
	DN_PERFORMANCE EventId = "DN_PERFORMANCE"
)

// AllowedEventIdEnumValues is all the allowed values of EventId enum
var AllowedEventIdEnumValues = []EventId{
	"LOAD_LEVEL_INFORMATION",
	"NETWORK_PERFORMANCE",
	"NF_LOAD",
	"SERVICE_EXPERIENCE",
	"UE_MOBILITY",
	"UE_COMMUNICATION",
	"QOS_SUSTAINABILITY",
	"ABNORMAL_BEHAVIOUR",
	"USER_DATA_CONGESTION",
	"NSI_LOAD_LEVEL",
	"SM_CONGESTION",
	"DISPERSION",
	"RED_TRANS_EXP",
	"WLAN_PERFORMANCE",
	"DN_PERFORMANCE",
}

// validEventIdEnumValue provides a map of EventIds for fast verification of use input
var validEventIdEnumValues = map[EventId]struct{}{
	"LOAD_LEVEL_INFORMATION": {},
	"NETWORK_PERFORMANCE": {},
	"NF_LOAD": {},
	"SERVICE_EXPERIENCE": {},
	"UE_MOBILITY": {},
	"UE_COMMUNICATION": {},
	"QOS_SUSTAINABILITY": {},
	"ABNORMAL_BEHAVIOUR": {},
	"USER_DATA_CONGESTION": {},
	"NSI_LOAD_LEVEL": {},
	"SM_CONGESTION": {},
	"DISPERSION": {},
	"RED_TRANS_EXP": {},
	"WLAN_PERFORMANCE": {},
	"DN_PERFORMANCE": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventId) IsValid() bool {
	_, ok := validEventIdEnumValues[v]
	return ok
}

// NewEventIdFromValue returns a pointer to a valid EventId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventIdFromValue(v string) (EventId, error) {
	ev := EventId(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for EventId: valid values are %v", v, AllowedEventIdEnumValues)
}



// AssertEventIdRequired checks if the required fields are not zero-ed
func AssertEventIdRequired(obj EventId) error {
	return nil
}

// AssertEventIdConstraints checks if the values respects the defined constraints
func AssertEventIdConstraints(obj EventId) error {
	return nil
}
