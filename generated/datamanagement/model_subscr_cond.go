// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   © 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// SubscrCond - Condition to determine the set of NFs to monitor under a certain subscription in NRF 
type SubscrCond struct {

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NfInstanceId string `json:"nfInstanceId"`

	NfInstanceIdList []string `json:"nfInstanceIdList"`

	NfType string `json:"nfType"`

	ServiceName ServiceName `json:"serviceName"`

	ConditionType string `json:"conditionType"`

	ServiceNameList []ServiceName `json:"serviceNameList"`

	// String identifying the AMF Set ID (10 bits) as specified in clause 2.10.1 of 3GPP TS 23.003.  It is encoded as a string of 3 hexadecimal characters where the first character is limited to  values 0 to 3 (i.e. 10 bits). 
	AmfSetId string `json:"amfSetId,omitempty"`

	// String identifying the AMF Set ID (10 bits) as specified in clause 2.10.1 of 3GPP TS 23.003.  It is encoded as a string of 3 hexadecimal characters where the first character is limited to  values 0 to 3 (i.e. 10 bits) 
	AmfRegionId string `json:"amfRegionId,omitempty"`

	GuamiList []Guami `json:"guamiList"`

	SnssaiList []Snssai `json:"snssaiList"`

	NsiList []string `json:"nsiList,omitempty"`

	// Identifier of a group of NFs.
	NfGroupId string `json:"nfGroupId"`

	NfGroupIdList []string `json:"nfGroupIdList"`

	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	NfSetId string `json:"nfSetId"`

	// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted as the following  string \"set<Set ID>.sn<Service Name>.nfi<NF Instance ID>.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.sn<ServiceName>.nfi<NFInstanceID>.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)   <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NID> encoded as defined in clause 5.4.2 (\"Nid\" data type definition)  <NFInstanceId> encoded as defined in clause 5.3.2  <ServiceName> encoded as defined in 3GPP TS 29.510  <Set ID> encoded as a string of characters consisting of alphabetic    characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end    with either an alphabetic character or a digit. 
	NfServiceSetId string `json:"nfServiceSetId"`

	SmfServingArea []string `json:"smfServingArea,omitempty"`

	TaiList []Tai `json:"taiList,omitempty"`

	ScpDomains []string `json:"scpDomains"`

	NfTypeList []NfType `json:"nfTypeList,omitempty"`

	AnalyticsIds []string `json:"analyticsIds,omitempty"`

	TaiRangeList []TaiRange `json:"taiRangeList,omitempty"`

	ServingNfTypeList []NfType `json:"servingNfTypeList,omitempty"`

	ServingNfSetIdList []string `json:"servingNfSetIdList,omitempty"`

	MlAnalyticsList []MlAnalyticsInfo `json:"mlAnalyticsList,omitempty"`

	AfEvents []AfEvent `json:"afEvents,omitempty"`

	PfdData PfdData `json:"pfdData,omitempty"`

	GpsiRanges []IdentityRange `json:"gpsiRanges,omitempty"`

	ExternalGroupIdentifiersRanges []IdentityRange `json:"externalGroupIdentifiersRanges,omitempty"`

	ServedFqdnList []string `json:"servedFqdnList,omitempty"`
}

// AssertSubscrCondRequired checks if the required fields are not zero-ed
func AssertSubscrCondRequired(obj SubscrCond) error {
	elements := map[string]interface{}{
		"nfInstanceId": obj.NfInstanceId,
		"nfInstanceIdList": obj.NfInstanceIdList,
		"nfType": obj.NfType,
		"serviceName": obj.ServiceName,
		"conditionType": obj.ConditionType,
		"serviceNameList": obj.ServiceNameList,
		"guamiList": obj.GuamiList,
		"snssaiList": obj.SnssaiList,
		"nfGroupId": obj.NfGroupId,
		"nfGroupIdList": obj.NfGroupIdList,
		"nfSetId": obj.NfSetId,
		"nfServiceSetId": obj.NfServiceSetId,
		"scpDomains": obj.ScpDomains,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertServiceNameRequired(obj.ServiceName); err != nil {
		return err
	}
	for _, el := range obj.ServiceNameList {
		if err := AssertServiceNameRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GuamiList {
		if err := AssertGuamiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SnssaiList {
		if err := AssertSnssaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NfTypeList {
		if err := AssertNfTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServingNfTypeList {
		if err := AssertNfTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MlAnalyticsList {
		if err := AssertMlAnalyticsInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AfEvents {
		if err := AssertAfEventRequired(el); err != nil {
			return err
		}
	}
	if err := AssertPfdDataRequired(obj.PfdData); err != nil {
		return err
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExternalGroupIdentifiersRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertSubscrCondConstraints checks if the values respects the defined constraints
func AssertSubscrCondConstraints(obj SubscrCond) error {
	if err := AssertServiceNameConstraints(obj.ServiceName); err != nil {
		return err
	}
	for _, el := range obj.ServiceNameList {
		if err := AssertServiceNameConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GuamiList {
		if err := AssertGuamiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SnssaiList {
		if err := AssertSnssaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NfTypeList {
		if err := AssertNfTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServingNfTypeList {
		if err := AssertNfTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MlAnalyticsList {
		if err := AssertMlAnalyticsInfoConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AfEvents {
		if err := AssertAfEventConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertPfdDataConstraints(obj.PfdData); err != nil {
		return err
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExternalGroupIdentifiersRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
