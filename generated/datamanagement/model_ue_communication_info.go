// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// UeCommunicationInfo - Contains UE communication information associated with an application.
type UeCommunicationInfo struct {

	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
	Supi string `json:"supi,omitempty" validate:"regexp=^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$"`

	// String identifying a group of devices network internal globally unique ID which identifies a set of IMSIs, as specified in clause 19.9 of 3GPP TS 23.003.  
	InterGroupId string `json:"interGroupId,omitempty" validate:"regexp=^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$"`

	// String providing an application identifier.
	AppId string `json:"appId,omitempty"`

	Comms []CommunicationCollection `json:"comms"`
}

// AssertUeCommunicationInfoRequired checks if the required fields are not zero-ed
func AssertUeCommunicationInfoRequired(obj UeCommunicationInfo) error {
	elements := map[string]interface{}{
		"comms": obj.Comms,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Comms {
		if err := AssertCommunicationCollectionRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertUeCommunicationInfoConstraints checks if the values respects the defined constraints
func AssertUeCommunicationInfoConstraints(obj UeCommunicationInfo) error {
	for _, el := range obj.Comms {
		if err := AssertCommunicationCollectionConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
