// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// AmfInfo - Information of an AMF NF Instance
type AmfInfo struct {

	// String identifying the AMF Set ID (10 bits) as specified in clause 2.10.1 of 3GPP TS 23.003.  It is encoded as a string of 3 hexadecimal characters where the first character is limited to  values 0 to 3 (i.e. 10 bits). 
	AmfSetId string `json:"amfSetId" validate:"regexp=^[0-3][A-Fa-f0-9]{2}$"`

	// String identifying the AMF Set ID (10 bits) as specified in clause 2.10.1 of 3GPP TS 23.003.  It is encoded as a string of 3 hexadecimal characters where the first character is limited to  values 0 to 3 (i.e. 10 bits) 
	AmfRegionId string `json:"amfRegionId" validate:"regexp=^[A-Fa-f0-9]{2}$"`

	GuamiList []Guami `json:"guamiList"`

	TaiList []Tai `json:"taiList,omitempty"`

	TaiRangeList []TaiRange `json:"taiRangeList,omitempty"`

	BackupInfoAmfFailure []Guami `json:"backupInfoAmfFailure,omitempty"`

	BackupInfoAmfRemoval []Guami `json:"backupInfoAmfRemoval,omitempty"`

	N2InterfaceAmfInfo N2InterfaceAmfInfo `json:"n2InterfaceAmfInfo,omitempty"`

	AmfOnboardingCapability bool `json:"amfOnboardingCapability,omitempty"`

	HighLatencyCom bool `json:"highLatencyCom,omitempty"`
}

// AssertAmfInfoRequired checks if the required fields are not zero-ed
func AssertAmfInfoRequired(obj AmfInfo) error {
	elements := map[string]interface{}{
		"amfSetId": obj.AmfSetId,
		"amfRegionId": obj.AmfRegionId,
		"guamiList": obj.GuamiList,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.GuamiList {
		if err := AssertGuamiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.BackupInfoAmfFailure {
		if err := AssertGuamiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.BackupInfoAmfRemoval {
		if err := AssertGuamiRequired(el); err != nil {
			return err
		}
	}
	if err := AssertN2InterfaceAmfInfoRequired(obj.N2InterfaceAmfInfo); err != nil {
		return err
	}
	return nil
}

// AssertAmfInfoConstraints checks if the values respects the defined constraints
func AssertAmfInfoConstraints(obj AmfInfo) error {
	for _, el := range obj.GuamiList {
		if err := AssertGuamiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.BackupInfoAmfFailure {
		if err := AssertGuamiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.BackupInfoAmfRemoval {
		if err := AssertGuamiConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertN2InterfaceAmfInfoConstraints(obj.N2InterfaceAmfInfo); err != nil {
		return err
	}
	return nil
}
