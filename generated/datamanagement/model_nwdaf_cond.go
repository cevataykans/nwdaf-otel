// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// NwdafCond - Subscription to a set of NF Instances (NWDAFs), identified by Analytics ID(s), S-NSSAI(s) or NWDAF Serving Area information, i.e. list of TAIs for which the NWDAF can provide analytics. 
type NwdafCond struct {

	ConditionType string `json:"conditionType"`

	AnalyticsIds []string `json:"analyticsIds,omitempty"`

	SnssaiList []Snssai `json:"snssaiList,omitempty"`

	TaiList []Tai `json:"taiList,omitempty"`

	TaiRangeList []TaiRange `json:"taiRangeList,omitempty"`

	ServingNfTypeList []NfType `json:"servingNfTypeList,omitempty"`

	ServingNfSetIdList []string `json:"servingNfSetIdList,omitempty"`

	MlAnalyticsList []MlAnalyticsInfo `json:"mlAnalyticsList,omitempty"`
}

// AssertNwdafCondRequired checks if the required fields are not zero-ed
func AssertNwdafCondRequired(obj NwdafCond) error {
	elements := map[string]interface{}{
		"conditionType": obj.ConditionType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.SnssaiList {
		if err := AssertSnssaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServingNfTypeList {
		if err := AssertNfTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MlAnalyticsList {
		if err := AssertMlAnalyticsInfoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertNwdafCondConstraints checks if the values respects the defined constraints
func AssertNwdafCondConstraints(obj NwdafCond) error {
	for _, el := range obj.SnssaiList {
		if err := AssertSnssaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ServingNfTypeList {
		if err := AssertNfTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MlAnalyticsList {
		if err := AssertMlAnalyticsInfoConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
