// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"errors"
)



// MbUpfInfo - Information of an MB-UPF NF Instance
type MbUpfInfo struct {

	SNssaiMbUpfInfoList []SnssaiUpfInfoItem `json:"sNssaiMbUpfInfoList"`

	MbSmfServingArea []string `json:"mbSmfServingArea,omitempty"`

	InterfaceMbUpfInfoList []InterfaceUpfInfoItem `json:"interfaceMbUpfInfoList,omitempty"`

	TaiList []Tai `json:"taiList,omitempty"`

	TaiRangeList []TaiRange `json:"taiRangeList,omitempty"`

	Priority int32 `json:"priority,omitempty"`

	SupportedPfcpFeatures string `json:"supportedPfcpFeatures,omitempty"`
}

// AssertMbUpfInfoRequired checks if the required fields are not zero-ed
func AssertMbUpfInfoRequired(obj MbUpfInfo) error {
	elements := map[string]interface{}{
		"sNssaiMbUpfInfoList": obj.SNssaiMbUpfInfoList,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.SNssaiMbUpfInfoList {
		if err := AssertSnssaiUpfInfoItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InterfaceMbUpfInfoList {
		if err := AssertInterfaceUpfInfoItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertMbUpfInfoConstraints checks if the values respects the defined constraints
func AssertMbUpfInfoConstraints(obj MbUpfInfo) error {
	for _, el := range obj.SNssaiMbUpfInfoList {
		if err := AssertSnssaiUpfInfoItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InterfaceMbUpfInfoList {
		if err := AssertInterfaceUpfInfoItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeConstraints(el); err != nil {
			return err
		}
	}
	if obj.Priority < 0 {
		return &ParsingError{Param: "Priority", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Priority > 65535 {
		return &ParsingError{Param: "Priority", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
