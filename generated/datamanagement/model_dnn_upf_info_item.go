// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// DnnUpfInfoItem - Set of parameters supported by UPF for a given DNN
type DnnUpfInfoItem struct {

	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\"). 
	Dnn string `json:"dnn"`

	DnaiList []string `json:"dnaiList,omitempty"`

	PduSessionTypes []PduSessionType `json:"pduSessionTypes,omitempty"`

	Ipv4AddressRanges []Ipv4AddressRange `json:"ipv4AddressRanges,omitempty"`

	Ipv6PrefixRanges []Ipv6PrefixRange `json:"ipv6PrefixRanges,omitempty"`

	Ipv4IndexList []IpIndex `json:"ipv4IndexList,omitempty"`

	Ipv6IndexList []IpIndex `json:"ipv6IndexList,omitempty"`

	// Map of network instance per DNAI for the DNN, where the key of the map is the DNAI. When present, the value of each entry of the map shall contain a N6 network instance that is configured for the DNAI indicated by the key. 
	DnaiNwInstanceList map[string]string `json:"dnaiNwInstanceList,omitempty"`
}

// AssertDnnUpfInfoItemRequired checks if the required fields are not zero-ed
func AssertDnnUpfInfoItemRequired(obj DnnUpfInfoItem) error {
	elements := map[string]interface{}{
		"dnn": obj.Dnn,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.PduSessionTypes {
		if err := AssertPduSessionTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv4AddressRanges {
		if err := AssertIpv4AddressRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv6PrefixRanges {
		if err := AssertIpv6PrefixRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv4IndexList {
		if err := AssertIpIndexRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv6IndexList {
		if err := AssertIpIndexRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertDnnUpfInfoItemConstraints checks if the values respects the defined constraints
func AssertDnnUpfInfoItemConstraints(obj DnnUpfInfoItem) error {
	for _, el := range obj.PduSessionTypes {
		if err := AssertPduSessionTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv4AddressRanges {
		if err := AssertIpv4AddressRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv6PrefixRanges {
		if err := AssertIpv6PrefixRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv4IndexList {
		if err := AssertIpIndexConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv6IndexList {
		if err := AssertIpIndexConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
