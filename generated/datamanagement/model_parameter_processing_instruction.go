// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// ParameterProcessingInstruction - Contains an event parameter name and the respective event parameter values and sets of attributes to be used in summarized reports. 
type ParameterProcessingInstruction struct {

	// A JSON pointer value that references an attribute within the notification object to which the processing instruction is applied. 
	Name string `json:"name"`

	// A list of values for the attribute identified by the name attribute.
	Values []interface{} `json:"values"`

	// Attributes requested to be used in the summarized reports.
	SumAttrs []SummarizationAttribute `json:"sumAttrs"`

	AggrLevel AggregationLevel `json:"aggrLevel,omitempty"`

	// Indicates the UEs for which processed reports are requested.
	Supis []string `json:"supis,omitempty"`

	// Indicates the Areas of Interest for which processed reports are requested.
	Areas []NetworkAreaInfo `json:"areas,omitempty"`
}

// AssertParameterProcessingInstructionRequired checks if the required fields are not zero-ed
func AssertParameterProcessingInstructionRequired(obj ParameterProcessingInstruction) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"values": obj.Values,
		"sumAttrs": obj.SumAttrs,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.SumAttrs {
		if err := AssertSummarizationAttributeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertAggregationLevelRequired(obj.AggrLevel); err != nil {
		return err
	}
	for _, el := range obj.Areas {
		if err := AssertNetworkAreaInfoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertParameterProcessingInstructionConstraints checks if the values respects the defined constraints
func AssertParameterProcessingInstructionConstraints(obj ParameterProcessingInstruction) error {
	for _, el := range obj.SumAttrs {
		if err := AssertSummarizationAttributeConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertAggregationLevelConstraints(obj.AggrLevel); err != nil {
		return err
	}
	for _, el := range obj.Areas {
		if err := AssertNetworkAreaInfoConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
