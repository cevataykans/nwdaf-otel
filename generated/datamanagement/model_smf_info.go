// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"errors"
)



// SmfInfo - Information of an SMF NF Instance
type SmfInfo struct {

	SNssaiSmfInfoList []SnssaiSmfInfoItem `json:"sNssaiSmfInfoList"`

	TaiList []Tai `json:"taiList,omitempty"`

	TaiRangeList []TaiRange `json:"taiRangeList,omitempty"`

	// Fully Qualified Domain Name
	PgwFqdn string `json:"pgwFqdn,omitempty" validate:"regexp=^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\\\\.)+[A-Za-z]{2,63}\\\\.?$"`

	PgwIpAddrList []IpAddr `json:"pgwIpAddrList,omitempty"`

	AccessType []AccessType `json:"accessType,omitempty"`

	Priority int32 `json:"priority,omitempty"`

	VsmfSupportInd bool `json:"vsmfSupportInd,omitempty"`

	PgwFqdnList []string `json:"pgwFqdnList,omitempty"`

	// Deprecated
	SmfOnboardingCapability bool `json:"smfOnboardingCapability,omitempty"`

	IsmfSupportInd bool `json:"ismfSupportInd,omitempty"`

	SmfUPRPCapability bool `json:"smfUPRPCapability,omitempty"`
}

// AssertSmfInfoRequired checks if the required fields are not zero-ed
func AssertSmfInfoRequired(obj SmfInfo) error {
	elements := map[string]interface{}{
		"sNssaiSmfInfoList": obj.SNssaiSmfInfoList,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.SNssaiSmfInfoList {
		if err := AssertSnssaiSmfInfoItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PgwIpAddrList {
		if err := AssertIpAddrRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertSmfInfoConstraints checks if the values respects the defined constraints
func AssertSmfInfoConstraints(obj SmfInfo) error {
	for _, el := range obj.SNssaiSmfInfoList {
		if err := AssertSnssaiSmfInfoItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiList {
		if err := AssertTaiConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TaiRangeList {
		if err := AssertTaiRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PgwIpAddrList {
		if err := AssertIpAddrConstraints(el); err != nil {
			return err
		}
	}
	if obj.Priority < 0 {
		return &ParsingError{Param: "Priority", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Priority > 65535 {
		return &ParsingError{Param: "Priority", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
