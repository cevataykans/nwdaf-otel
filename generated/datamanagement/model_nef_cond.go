// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// NefCond - Subscription to a set of NF Instances (NEFs), identified by Event ID(s) provided by AF, S-NSSAI(s), AF Instance ID, Application Identifier, External Identifier, External Group Identifier, or domain name. 
type NefCond struct {

	ConditionType string `json:"conditionType"`

	AfEvents []AfEvent `json:"afEvents,omitempty"`

	SnssaiList []Snssai `json:"snssaiList,omitempty"`

	PfdData PfdData `json:"pfdData,omitempty"`

	GpsiRanges []IdentityRange `json:"gpsiRanges,omitempty"`

	ExternalGroupIdentifiersRanges []IdentityRange `json:"externalGroupIdentifiersRanges,omitempty"`

	ServedFqdnList []string `json:"servedFqdnList,omitempty"`
}

// AssertNefCondRequired checks if the required fields are not zero-ed
func AssertNefCondRequired(obj NefCond) error {
	elements := map[string]interface{}{
		"conditionType": obj.ConditionType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.AfEvents {
		if err := AssertAfEventRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SnssaiList {
		if err := AssertSnssaiRequired(el); err != nil {
			return err
		}
	}
	if err := AssertPfdDataRequired(obj.PfdData); err != nil {
		return err
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExternalGroupIdentifiersRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertNefCondConstraints checks if the values respects the defined constraints
func AssertNefCondConstraints(obj NefCond) error {
	for _, el := range obj.AfEvents {
		if err := AssertAfEventConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SnssaiList {
		if err := AssertSnssaiConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertPfdDataConstraints(obj.PfdData); err != nil {
		return err
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExternalGroupIdentifiersRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
