// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement




// TsctsfInfo - Information of a TSCTSF NF Instance
type TsctsfInfo struct {

	// A map (list of key-value pairs) where a valid JSON string serves as key
	SNssaiInfoList map[string]SnssaiTsctsfInfoItem `json:"sNssaiInfoList,omitempty"`

	ExternalGroupIdentifiersRanges []IdentityRange `json:"externalGroupIdentifiersRanges,omitempty"`

	SupiRanges []SupiRange `json:"supiRanges,omitempty"`

	GpsiRanges []IdentityRange `json:"gpsiRanges,omitempty"`

	InternalGroupIdentifiersRanges []InternalGroupIdRange `json:"internalGroupIdentifiersRanges,omitempty"`
}

// AssertTsctsfInfoRequired checks if the required fields are not zero-ed
func AssertTsctsfInfoRequired(obj TsctsfInfo) error {
	for _, el := range obj.ExternalGroupIdentifiersRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SupiRanges {
		if err := AssertSupiRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InternalGroupIdentifiersRanges {
		if err := AssertInternalGroupIdRangeRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertTsctsfInfoConstraints checks if the values respects the defined constraints
func AssertTsctsfInfoConstraints(obj TsctsfInfo) error {
	for _, el := range obj.ExternalGroupIdentifiersRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SupiRanges {
		if err := AssertSupiRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GpsiRanges {
		if err := AssertIdentityRangeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InternalGroupIdentifiersRanges {
		if err := AssertInternalGroupIdRangeConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
