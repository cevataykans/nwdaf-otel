// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"time"
)



// NefEventNotification - Represents information related to an event to be reported.
type NefEventNotification struct {

	Event NefEvent `json:"event"`

	// string with format 'date-time' as defined in OpenAPI.
	TimeStamp time.Time `json:"timeStamp"`

	SvcExprcInfos []ServiceExperienceInfo1 `json:"svcExprcInfos,omitempty"`

	UeMobilityInfos []UeMobilityInfo `json:"ueMobilityInfos,omitempty"`

	UeCommInfos []UeCommunicationInfo `json:"ueCommInfos,omitempty"`

	ExcepInfos []ExceptionInfo `json:"excepInfos,omitempty"`

	CongestionInfos []UserDataCongestionCollection `json:"congestionInfos,omitempty"`

	PerfDataInfos []PerformanceDataInfo `json:"perfDataInfos,omitempty"`

	DispersionInfos []DispersionCollection1 `json:"dispersionInfos,omitempty"`

	CollBhvrInfs []CollectiveBehaviourInfo `json:"collBhvrInfs,omitempty"`

	MsQoeMetrInfos []MsQoeMetricsCollection `json:"msQoeMetrInfos,omitempty"`

	MsConsumpInfos []MsConsumptionCollection `json:"msConsumpInfos,omitempty"`

	MsNetAssInvInfos []MsNetAssInvocationCollection `json:"msNetAssInvInfos,omitempty"`

	MsDynPlyInvInfos []MsDynPolicyInvocationCollection `json:"msDynPlyInvInfos,omitempty"`

	MsAccActInfos []MsAccessActivityCollection `json:"msAccActInfos,omitempty"`
}

// AssertNefEventNotificationRequired checks if the required fields are not zero-ed
func AssertNefEventNotificationRequired(obj NefEventNotification) error {
	elements := map[string]interface{}{
		"event": obj.Event,
		"timeStamp": obj.TimeStamp,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNefEventRequired(obj.Event); err != nil {
		return err
	}
	for _, el := range obj.SvcExprcInfos {
		if err := AssertServiceExperienceInfo1Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UeMobilityInfos {
		if err := AssertUeMobilityInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UeCommInfos {
		if err := AssertUeCommunicationInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExcepInfos {
		if err := AssertExceptionInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CongestionInfos {
		if err := AssertUserDataCongestionCollectionRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PerfDataInfos {
		if err := AssertPerformanceDataInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DispersionInfos {
		if err := AssertDispersionCollection1Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CollBhvrInfs {
		if err := AssertCollectiveBehaviourInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsQoeMetrInfos {
		if err := AssertMsQoeMetricsCollectionRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsConsumpInfos {
		if err := AssertMsConsumptionCollectionRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsNetAssInvInfos {
		if err := AssertMsNetAssInvocationCollectionRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsDynPlyInvInfos {
		if err := AssertMsDynPolicyInvocationCollectionRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsAccActInfos {
		if err := AssertMsAccessActivityCollectionRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertNefEventNotificationConstraints checks if the values respects the defined constraints
func AssertNefEventNotificationConstraints(obj NefEventNotification) error {
	if err := AssertNefEventConstraints(obj.Event); err != nil {
		return err
	}
	for _, el := range obj.SvcExprcInfos {
		if err := AssertServiceExperienceInfo1Constraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UeMobilityInfos {
		if err := AssertUeMobilityInfoConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UeCommInfos {
		if err := AssertUeCommunicationInfoConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ExcepInfos {
		if err := AssertExceptionInfoConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CongestionInfos {
		if err := AssertUserDataCongestionCollectionConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PerfDataInfos {
		if err := AssertPerformanceDataInfoConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DispersionInfos {
		if err := AssertDispersionCollection1Constraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CollBhvrInfs {
		if err := AssertCollectiveBehaviourInfoConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsQoeMetrInfos {
		if err := AssertMsQoeMetricsCollectionConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsConsumpInfos {
		if err := AssertMsConsumptionCollectionConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsNetAssInvInfos {
		if err := AssertMsNetAssInvocationCollectionConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsDynPlyInvInfos {
		if err := AssertMsDynPolicyInvocationCollectionConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MsAccActInfos {
		if err := AssertMsAccessActivityCollectionConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
