// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_DataManagement
 *
 * Nnwdaf_DataManagement API Service.   © 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.3
 */

package datamanagement


import (
	"time"
)



// AmfEventReport - Represents a report triggered by a subscribed event type
type AmfEventReport struct {

	Type AmfEventType `json:"type"`

	State AmfEventState `json:"state"`

	// string with format 'date-time' as defined in OpenAPI.
	TimeStamp time.Time `json:"timeStamp"`

	// String providing an URI formatted according to RFC 3986.
	SubscriptionId string `json:"subscriptionId,omitempty"`

	AnyUe bool `json:"anyUe,omitempty"`

	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
	Supi string `json:"supi,omitempty" validate:"regexp=^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$"`

	AreaList []AmfEventArea `json:"areaList,omitempty"`

	RefId int32 `json:"refId,omitempty"`

	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
	Gpsi string `json:"gpsi,omitempty" validate:"regexp=^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$"`

	// String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.  
	Pei string `json:"pei,omitempty" validate:"regexp=^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$"`

	Location UserLocation `json:"location,omitempty"`

	AdditionalLocation UserLocation `json:"additionalLocation,omitempty"`

	// String with format \"time-numoffset\" optionally appended by \"daylightSavingTime\", where  - \"time-numoffset\" shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \"daylightSavingTime\" shall represent the adjustment that has been made and shall be    encoded as \"+1\" or \"+2\" for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time. 
	Timezone string `json:"timezone,omitempty"`

	AccessTypeList []AccessType `json:"accessTypeList,omitempty"`

	RmInfoList []RmInfo `json:"rmInfoList,omitempty"`

	CmInfoList []CmInfo `json:"cmInfoList,omitempty"`

	Reachability UeReachability `json:"reachability,omitempty"`

	CommFailure CommunicationFailure `json:"commFailure,omitempty"`

	LossOfConnectReason LossOfConnectivityReason `json:"lossOfConnectReason,omitempty"`

	NumberOfUes int32 `json:"numberOfUes,omitempty"`

	Var5gsUserStateList []Model5GsUserStateInfo `json:"5gsUserStateList,omitempty"`

	TypeCode string `json:"typeCode,omitempty" validate:"regexp=^imeitac-[0-9]{8}$"`

	RegistrationNumber int32 `json:"registrationNumber,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	MaxAvailabilityTime time.Time `json:"maxAvailabilityTime,omitempty"`

	UeIdExt []UeidExt `json:"ueIdExt,omitempty"`

	SnssaiTaiList []SnssaiTaiMapping `json:"snssaiTaiList,omitempty"`

	IdleStatusIndication IdleStatusIndication `json:"idleStatusIndication,omitempty"`

	UeAccessBehaviorTrends []UeAccessBehaviorReportItem `json:"ueAccessBehaviorTrends,omitempty"`

	UeLocationTrends []UeLocationTrendsReportItem `json:"ueLocationTrends,omitempty"`

	MmTransLocationReportList []MmTransactionLocationReportItem `json:"mmTransLocationReportList,omitempty"`

	MmTransSliceReportList []MmTransactionSliceReportItem `json:"mmTransSliceReportList,omitempty"`
}

// AssertAmfEventReportRequired checks if the required fields are not zero-ed
func AssertAmfEventReportRequired(obj AmfEventReport) error {
	elements := map[string]interface{}{
		"type": obj.Type,
		"state": obj.State,
		"timeStamp": obj.TimeStamp,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertAmfEventTypeRequired(obj.Type); err != nil {
		return err
	}
	if err := AssertAmfEventStateRequired(obj.State); err != nil {
		return err
	}
	for _, el := range obj.AreaList {
		if err := AssertAmfEventAreaRequired(el); err != nil {
			return err
		}
	}
	if err := AssertUserLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.AdditionalLocation); err != nil {
		return err
	}
	for _, el := range obj.RmInfoList {
		if err := AssertRmInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CmInfoList {
		if err := AssertCmInfoRequired(el); err != nil {
			return err
		}
	}
	if err := AssertUeReachabilityRequired(obj.Reachability); err != nil {
		return err
	}
	if err := AssertCommunicationFailureRequired(obj.CommFailure); err != nil {
		return err
	}
	if err := AssertLossOfConnectivityReasonRequired(obj.LossOfConnectReason); err != nil {
		return err
	}
	for _, el := range obj.Var5gsUserStateList {
		if err := AssertModel5GsUserStateInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UeIdExt {
		if err := AssertUeidExtRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SnssaiTaiList {
		if err := AssertSnssaiTaiMappingRequired(el); err != nil {
			return err
		}
	}
	if err := AssertIdleStatusIndicationRequired(obj.IdleStatusIndication); err != nil {
		return err
	}
	for _, el := range obj.UeAccessBehaviorTrends {
		if err := AssertUeAccessBehaviorReportItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UeLocationTrends {
		if err := AssertUeLocationTrendsReportItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MmTransLocationReportList {
		if err := AssertMmTransactionLocationReportItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MmTransSliceReportList {
		if err := AssertMmTransactionSliceReportItemRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertAmfEventReportConstraints checks if the values respects the defined constraints
func AssertAmfEventReportConstraints(obj AmfEventReport) error {
	if err := AssertAmfEventTypeConstraints(obj.Type); err != nil {
		return err
	}
	if err := AssertAmfEventStateConstraints(obj.State); err != nil {
		return err
	}
	for _, el := range obj.AreaList {
		if err := AssertAmfEventAreaConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertUserLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertUserLocationConstraints(obj.AdditionalLocation); err != nil {
		return err
	}
	for _, el := range obj.RmInfoList {
		if err := AssertRmInfoConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CmInfoList {
		if err := AssertCmInfoConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertUeReachabilityConstraints(obj.Reachability); err != nil {
		return err
	}
	if err := AssertCommunicationFailureConstraints(obj.CommFailure); err != nil {
		return err
	}
	if err := AssertLossOfConnectivityReasonConstraints(obj.LossOfConnectReason); err != nil {
		return err
	}
	for _, el := range obj.Var5gsUserStateList {
		if err := AssertModel5GsUserStateInfoConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UeIdExt {
		if err := AssertUeidExtConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SnssaiTaiList {
		if err := AssertSnssaiTaiMappingConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertIdleStatusIndicationConstraints(obj.IdleStatusIndication); err != nil {
		return err
	}
	for _, el := range obj.UeAccessBehaviorTrends {
		if err := AssertUeAccessBehaviorReportItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UeLocationTrends {
		if err := AssertUeLocationTrendsReportItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MmTransLocationReportList {
		if err := AssertMmTransactionLocationReportItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MmTransSliceReportList {
		if err := AssertMmTransactionSliceReportItemConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
