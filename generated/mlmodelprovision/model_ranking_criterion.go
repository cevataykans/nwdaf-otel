// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_MLModelProvision
 *
 * Nnwdaf_MLModelProvision API Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.0
 */

package mlmodelprovision


import (
	"errors"
)



// RankingCriterion - Indicates the usage ranking criterion between the high, medium and low usage UE.
type RankingCriterion struct {

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	HighBase int32 `json:"highBase"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	LowBase int32 `json:"lowBase"`
}

// AssertRankingCriterionRequired checks if the required fields are not zero-ed
func AssertRankingCriterionRequired(obj RankingCriterion) error {
	elements := map[string]interface{}{
		"highBase": obj.HighBase,
		"lowBase": obj.LowBase,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRankingCriterionConstraints checks if the values respects the defined constraints
func AssertRankingCriterionConstraints(obj RankingCriterion) error {
	if obj.HighBase < 1 {
		return &ParsingError{Param: "HighBase", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.HighBase > 100 {
		return &ParsingError{Param: "HighBase", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.LowBase < 1 {
		return &ParsingError{Param: "LowBase", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.LowBase > 100 {
		return &ParsingError{Param: "LowBase", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
