// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_MLModelProvision
 *
 * Nnwdaf_MLModelProvision API Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.0.0
 */

package mlmodelprovision

import (
	"encoding/json"
	"net/http"
	mlmodelprovisionAPI "nwdaf-otel/generated/mlmodelprovision"
	"strings"

	"github.com/gorilla/mux"
)

// IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController binds http requests to an api service and writes the service results to the http response
type IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController struct {
	service      mlmodelprovisionAPI.IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIServicer
	errorHandler mlmodelprovisionAPI.ErrorHandler
}

// IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIOption for how the controller is set up.
type IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIOption func(*IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController)

// WithIndividualNWDAFMLModelProvisionSubscriptionDocumentAPIErrorHandler inject ErrorHandler into controller
func WithIndividualNWDAFMLModelProvisionSubscriptionDocumentAPIErrorHandler(h mlmodelprovisionAPI.ErrorHandler) IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIOption {
	return func(c *IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController) {
		c.errorHandler = h
	}
}

// NewIndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController creates a default api controller
func NewIndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController(s mlmodelprovisionAPI.IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIServicer, opts ...IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIOption) *IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController {
	controller := &IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController{
		service:      s,
		errorHandler: mlmodelprovisionAPI.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController
func (c *IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController) Routes() mlmodelprovisionAPI.Routes {
	return mlmodelprovisionAPI.Routes{
		"UpdateNWDAFMLModelProvisionSubcription": mlmodelprovisionAPI.Route{
			"UpdateNWDAFMLModelProvisionSubcription",
			strings.ToUpper("Put"),
			"/nnwdaf-mlmodelprovision/v1/subscriptions/{subscriptionId}",
			c.UpdateNWDAFMLModelProvisionSubcription,
		},
		"DeleteNWDAFMLModelProvisionSubcription": mlmodelprovisionAPI.Route{
			"DeleteNWDAFMLModelProvisionSubcription",
			strings.ToUpper("Delete"),
			"/nnwdaf-mlmodelprovision/v1/subscriptions/{subscriptionId}",
			c.DeleteNWDAFMLModelProvisionSubcription,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController
func (c *IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController) OrderedRoutes() []mlmodelprovisionAPI.Route {
	return []mlmodelprovisionAPI.Route{
		mlmodelprovisionAPI.Route{
			"UpdateNWDAFMLModelProvisionSubcription",
			strings.ToUpper("Put"),
			"/nnwdaf-mlmodelprovision/v1/subscriptions/{subscriptionId}",
			c.UpdateNWDAFMLModelProvisionSubcription,
		},
		mlmodelprovisionAPI.Route{
			"DeleteNWDAFMLModelProvisionSubcription",
			strings.ToUpper("Delete"),
			"/nnwdaf-mlmodelprovision/v1/subscriptions/{subscriptionId}",
			c.DeleteNWDAFMLModelProvisionSubcription,
		},
	}
}



// UpdateNWDAFMLModelProvisionSubcription - update an existing Individual NWDAF ML Model Provision Subscription
func (c *IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController) UpdateNWDAFMLModelProvisionSubcription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]
	if subscriptionIdParam == "" {
		c.errorHandler(w, r, &mlmodelprovisionAPI.RequiredError{"subscriptionId"}, nil)
		return
	}
	var nwdafMlModelProvSubscParam mlmodelprovisionAPI.NwdafMlModelProvSubsc
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&nwdafMlModelProvSubscParam); err != nil {
		c.errorHandler(w, r, &mlmodelprovisionAPI.ParsingError{Err: err}, nil)
		return
	}
	if err := mlmodelprovisionAPI.AssertNwdafMlModelProvSubscRequired(nwdafMlModelProvSubscParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := mlmodelprovisionAPI.AssertNwdafMlModelProvSubscConstraints(nwdafMlModelProvSubscParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateNWDAFMLModelProvisionSubcription(r.Context(), subscriptionIdParam, nwdafMlModelProvSubscParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = mlmodelprovisionAPI.EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteNWDAFMLModelProvisionSubcription - Delete an existing Individual NWDAF ML Model Provision Subscription.
func (c *IndividualNWDAFMLModelProvisionSubscriptionDocumentAPIController) DeleteNWDAFMLModelProvisionSubcription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]
	if subscriptionIdParam == "" {
		c.errorHandler(w, r, &mlmodelprovisionAPI.RequiredError{"subscriptionId"}, nil)
		return
	}
	result, err := c.service.DeleteNWDAFMLModelProvisionSubcription(r.Context(), subscriptionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = mlmodelprovisionAPI.EncodeJSONResponse(result.Body, &result.Code, w)
}
