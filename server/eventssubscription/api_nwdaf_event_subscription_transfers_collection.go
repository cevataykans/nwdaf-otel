// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package eventssubscription

import (
	"encoding/json"
	"net/http"
	eventssubscriptionAPI "nwdaf-otel/generated/eventssubscription"
	"strings"
)

// NWDAFEventSubscriptionTransfersCollectionAPIController binds http requests to an api service and writes the service results to the http response
type NWDAFEventSubscriptionTransfersCollectionAPIController struct {
	service      eventssubscriptionAPI.NWDAFEventSubscriptionTransfersCollectionAPIServicer
	errorHandler eventssubscriptionAPI.ErrorHandler
}

// NWDAFEventSubscriptionTransfersCollectionAPIOption for how the controller is set up.
type NWDAFEventSubscriptionTransfersCollectionAPIOption func(*NWDAFEventSubscriptionTransfersCollectionAPIController)

// WithNWDAFEventSubscriptionTransfersCollectionAPIErrorHandler inject ErrorHandler into controller
func WithNWDAFEventSubscriptionTransfersCollectionAPIErrorHandler(h eventssubscriptionAPI.ErrorHandler) NWDAFEventSubscriptionTransfersCollectionAPIOption {
	return func(c *NWDAFEventSubscriptionTransfersCollectionAPIController) {
		c.errorHandler = h
	}
}

// NewNWDAFEventSubscriptionTransfersCollectionAPIController creates a default api controller
func NewNWDAFEventSubscriptionTransfersCollectionAPIController(s eventssubscriptionAPI.NWDAFEventSubscriptionTransfersCollectionAPIServicer, opts ...NWDAFEventSubscriptionTransfersCollectionAPIOption) *NWDAFEventSubscriptionTransfersCollectionAPIController {
	controller := &NWDAFEventSubscriptionTransfersCollectionAPIController{
		service:      s,
		errorHandler: eventssubscriptionAPI.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NWDAFEventSubscriptionTransfersCollectionAPIController
func (c *NWDAFEventSubscriptionTransfersCollectionAPIController) Routes() eventssubscriptionAPI.Routes {
	return eventssubscriptionAPI.Routes{
		"CreateNWDAFEventSubscriptionTransfer": eventssubscriptionAPI.Route{
			"CreateNWDAFEventSubscriptionTransfer",
			strings.ToUpper("Post"),
			"/nnwdaf-eventssubscription/v1/transfers",
			c.CreateNWDAFEventSubscriptionTransfer,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the NWDAFEventSubscriptionTransfersCollectionAPIController
func (c *NWDAFEventSubscriptionTransfersCollectionAPIController) OrderedRoutes() []eventssubscriptionAPI.Route {
	return []eventssubscriptionAPI.Route{
		eventssubscriptionAPI.Route{
			"CreateNWDAFEventSubscriptionTransfer",
			strings.ToUpper("Post"),
			"/nnwdaf-eventssubscription/v1/transfers",
			c.CreateNWDAFEventSubscriptionTransfer,
		},
	}
}



// CreateNWDAFEventSubscriptionTransfer - Provide information about requested analytics subscriptions transfer and potentially create a new Individual NWDAF Event Subscription Transfer resource.
func (c *NWDAFEventSubscriptionTransfersCollectionAPIController) CreateNWDAFEventSubscriptionTransfer(w http.ResponseWriter, r *http.Request) {
	var analyticsSubscriptionsTransferParam eventssubscriptionAPI.AnalyticsSubscriptionsTransfer
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&analyticsSubscriptionsTransferParam); err != nil {
		c.errorHandler(w, r, &eventssubscriptionAPI.ParsingError{Err: err}, nil)
		return
	}
	if err := eventssubscriptionAPI.AssertAnalyticsSubscriptionsTransferRequired(analyticsSubscriptionsTransferParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := eventssubscriptionAPI.AssertAnalyticsSubscriptionsTransferConstraints(analyticsSubscriptionsTransferParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateNWDAFEventSubscriptionTransfer(r.Context(), analyticsSubscriptionsTransferParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = eventssubscriptionAPI.EncodeJSONResponse(result.Body, &result.Code, w)
}
