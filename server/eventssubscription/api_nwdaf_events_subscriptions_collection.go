// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package eventssubscription

import (
	"encoding/json"
	"net/http"
	eventssubscriptionAPI "nwdaf-otel/generated/eventssubscription"
	"strings"
)

// NWDAFEventsSubscriptionsCollectionAPIController binds http requests to an api service and writes the service results to the http response
type NWDAFEventsSubscriptionsCollectionAPIController struct {
	service      eventssubscriptionAPI.NWDAFEventsSubscriptionsCollectionAPIServicer
	errorHandler eventssubscriptionAPI.ErrorHandler
}

// NWDAFEventsSubscriptionsCollectionAPIOption for how the controller is set up.
type NWDAFEventsSubscriptionsCollectionAPIOption func(*NWDAFEventsSubscriptionsCollectionAPIController)

// WithNWDAFEventsSubscriptionsCollectionAPIErrorHandler inject ErrorHandler into controller
func WithNWDAFEventsSubscriptionsCollectionAPIErrorHandler(h eventssubscriptionAPI.ErrorHandler) NWDAFEventsSubscriptionsCollectionAPIOption {
	return func(c *NWDAFEventsSubscriptionsCollectionAPIController) {
		c.errorHandler = h
	}
}

// NewNWDAFEventsSubscriptionsCollectionAPIController creates a default api controller
func NewNWDAFEventsSubscriptionsCollectionAPIController(s eventssubscriptionAPI.NWDAFEventsSubscriptionsCollectionAPIServicer, opts ...NWDAFEventsSubscriptionsCollectionAPIOption) *NWDAFEventsSubscriptionsCollectionAPIController {
	controller := &NWDAFEventsSubscriptionsCollectionAPIController{
		service:      s,
		errorHandler: eventssubscriptionAPI.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NWDAFEventsSubscriptionsCollectionAPIController
func (c *NWDAFEventsSubscriptionsCollectionAPIController) Routes() eventssubscriptionAPI.Routes {
	return eventssubscriptionAPI.Routes{
		"CreateNWDAFEventsSubscription": eventssubscriptionAPI.Route{
			"CreateNWDAFEventsSubscription",
			strings.ToUpper("Post"),
			"/nnwdaf-eventssubscription/v1/subscriptions",
			c.CreateNWDAFEventsSubscription,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the NWDAFEventsSubscriptionsCollectionAPIController
func (c *NWDAFEventsSubscriptionsCollectionAPIController) OrderedRoutes() []eventssubscriptionAPI.Route {
	return []eventssubscriptionAPI.Route{
		eventssubscriptionAPI.Route{
			"CreateNWDAFEventsSubscription",
			strings.ToUpper("Post"),
			"/nnwdaf-eventssubscription/v1/subscriptions",
			c.CreateNWDAFEventsSubscription,
		},
	}
}



// CreateNWDAFEventsSubscription - Create a new Individual NWDAF Events Subscription
func (c *NWDAFEventsSubscriptionsCollectionAPIController) CreateNWDAFEventsSubscription(w http.ResponseWriter, r *http.Request) {
	var nnwdafEventsSubscriptionParam eventssubscriptionAPI.NnwdafEventsSubscription
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&nnwdafEventsSubscriptionParam); err != nil {
		c.errorHandler(w, r, &eventssubscriptionAPI.ParsingError{Err: err}, nil)
		return
	}
	if err := eventssubscriptionAPI.AssertNnwdafEventsSubscriptionRequired(nnwdafEventsSubscriptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := eventssubscriptionAPI.AssertNnwdafEventsSubscriptionConstraints(nnwdafEventsSubscriptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateNWDAFEventsSubscription(r.Context(), nnwdafEventsSubscriptionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = eventssubscriptionAPI.EncodeJSONResponse(result.Body, &result.Code, w)
}
