// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo

import (
	"net/http"
	analyticsinfoAPI "nwdaf-otel/generated/analyticsinfo"
	"strings"
)

// NWDAFAnalyticsDocumentAPIController binds http requests to an api service and writes the service results to the http response
type NWDAFAnalyticsDocumentAPIController struct {
	service      analyticsinfoAPI.NWDAFAnalyticsDocumentAPIServicer
	errorHandler analyticsinfoAPI.ErrorHandler
}

// NWDAFAnalyticsDocumentAPIOption for how the controller is set up.
type NWDAFAnalyticsDocumentAPIOption func(*NWDAFAnalyticsDocumentAPIController)

// WithNWDAFAnalyticsDocumentAPIErrorHandler inject ErrorHandler into controller
func WithNWDAFAnalyticsDocumentAPIErrorHandler(h analyticsinfoAPI.ErrorHandler) NWDAFAnalyticsDocumentAPIOption {
	return func(c *NWDAFAnalyticsDocumentAPIController) {
		c.errorHandler = h
	}
}

// NewNWDAFAnalyticsDocumentAPIController creates a default api controller
func NewNWDAFAnalyticsDocumentAPIController(s analyticsinfoAPI.NWDAFAnalyticsDocumentAPIServicer, opts ...NWDAFAnalyticsDocumentAPIOption) *NWDAFAnalyticsDocumentAPIController {
	controller := &NWDAFAnalyticsDocumentAPIController{
		service:      s,
		errorHandler: analyticsinfoAPI.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NWDAFAnalyticsDocumentAPIController
func (c *NWDAFAnalyticsDocumentAPIController) Routes() analyticsinfoAPI.Routes {
	return analyticsinfoAPI.Routes{
		"GetNWDAFAnalytics": analyticsinfoAPI.Route{
			"GetNWDAFAnalytics",
			strings.ToUpper("Get"),
			"/nnwdaf-analyticsinfo/v1/analytics",
			c.GetNWDAFAnalytics,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the NWDAFAnalyticsDocumentAPIController
func (c *NWDAFAnalyticsDocumentAPIController) OrderedRoutes() []analyticsinfoAPI.Route {
	return []analyticsinfoAPI.Route{
		analyticsinfoAPI.Route{
			"GetNWDAFAnalytics",
			strings.ToUpper("Get"),
			"/nnwdaf-analyticsinfo/v1/analytics",
			c.GetNWDAFAnalytics,
		},
	}
}



// GetNWDAFAnalytics - Read a NWDAF Analytics
func (c *NWDAFAnalyticsDocumentAPIController) GetNWDAFAnalytics(w http.ResponseWriter, r *http.Request) {
	//query, err := parseQuery(r.URL.RawQuery)
	//if err != nil {
	//	c.errorHandler(w, r, &ParsingError{Err: err}, nil)
	//	return
	//}
	var eventIdParam analyticsinfoAPI.EventId
	//if query.Has("event-id") {
	//	param := EventId(query.Get("event-id"))
	//
	//	eventIdParam = param
	//} else {
	//	c.errorHandler(w, r, &RequiredError{Field: "event-id"}, nil)
	//	return
	//}
	var anaReqParam analyticsinfoAPI.EventReportingRequirement
	//if query.Has("ana-req") {
	//	param := EventReportingRequirement(query.Get("ana-req"))
	//
	//	anaReqParam = param
	//} else {
	//}
	var eventFilterParam analyticsinfoAPI.EventFilter
	//if query.Has("event-filter") {
	//	param := EventFilter(query.Get("event-filter"))
	//
	//	eventFilterParam = param
	//} else {
	//}
	var supportedFeaturesParam string
	//if query.Has("supported-features") {
	//	param := query.Get("supported-features")
	//
	//	supportedFeaturesParam = param
	//} else {
	//}
	var tgtUeParam analyticsinfoAPI.TargetUeInformation
	//if query.Has("tgt-ue") {
	//	param := TargetUeInformation(query.Get("tgt-ue"))
	//
	//	tgtUeParam = param
	//} else {
	//}
	result, err := c.service.GetNWDAFAnalytics(r.Context(), eventIdParam, anaReqParam, eventFilterParam, supportedFeaturesParam, tgtUeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = analyticsinfoAPI.EncodeJSONResponse(result.Body, &result.Code, w)
}
