// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.4
 */

package analyticsinfo

import (
	"net/http"
	analyticsinfoAPI "nwdaf-otel/generated/analyticsinfo"
	"strings"
)

// NWDAFContextDocumentAPIController binds http requests to an api service and writes the service results to the http response
type NWDAFContextDocumentAPIController struct {
	service      analyticsinfoAPI.NWDAFContextDocumentAPIServicer
	errorHandler analyticsinfoAPI.ErrorHandler
}

// NWDAFContextDocumentAPIOption for how the controller is set up.
type NWDAFContextDocumentAPIOption func(*NWDAFContextDocumentAPIController)

// WithNWDAFContextDocumentAPIErrorHandler inject ErrorHandler into controller
func WithNWDAFContextDocumentAPIErrorHandler(h analyticsinfoAPI.ErrorHandler) NWDAFContextDocumentAPIOption {
	return func(c *NWDAFContextDocumentAPIController) {
		c.errorHandler = h
	}
}

// NewNWDAFContextDocumentAPIController creates a default api controller
func NewNWDAFContextDocumentAPIController(s analyticsinfoAPI.NWDAFContextDocumentAPIServicer, opts ...NWDAFContextDocumentAPIOption) *NWDAFContextDocumentAPIController {
	controller := &NWDAFContextDocumentAPIController{
		service:      s,
		errorHandler: analyticsinfoAPI.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NWDAFContextDocumentAPIController
func (c *NWDAFContextDocumentAPIController) Routes() analyticsinfoAPI.Routes {
	return analyticsinfoAPI.Routes{
		"GetNwdafContext": analyticsinfoAPI.Route{
			"GetNwdafContext",
			strings.ToUpper("Get"),
			"/nnwdaf-analyticsinfo/v1/context",
			c.GetNwdafContext,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the NWDAFContextDocumentAPIController
func (c *NWDAFContextDocumentAPIController) OrderedRoutes() []analyticsinfoAPI.Route {
	return []analyticsinfoAPI.Route{
		analyticsinfoAPI.Route{
			"GetNwdafContext",
			strings.ToUpper("Get"),
			"/nnwdaf-analyticsinfo/v1/context",
			c.GetNwdafContext,
		},
	}
}



// GetNwdafContext - Get context information related to analytics subscriptions.
func (c *NWDAFContextDocumentAPIController) GetNwdafContext(w http.ResponseWriter, r *http.Request) {
	//query, err := parseQuery(r.URL.RawQuery)
	//if err != nil {
	//	c.errorHandler(w, r, &ParsingError{Err: err}, nil)
	//	return
	//}
	var contextIdsParam analyticsinfoAPI.ContextIdList
	//if query.Has("context-ids") {
	//	param := ContextIdList(query.Get("context-ids"))
	//
	//	contextIdsParam = param
	//} else {
	//	c.errorHandler(w, r, &RequiredError{Field: "context-ids"}, nil)
	//	return
	//}
	var reqContextParam analyticsinfoAPI.RequestedContext
	//if query.Has("req-context") {
	//	param := RequestedContext(query.Get("req-context"))
	//
	//	reqContextParam = param
	//} else {
	//}
	var supportedFeaturesParam string
	//if query.Has("supported-features") {
	//	param := query.Get("supported-features")
	//
	//	supportedFeaturesParam = param
	//} else {
	//}
	result, err := c.service.GetNwdafContext(r.Context(), contextIdsParam, reqContextParam, supportedFeaturesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = analyticsinfoAPI.EncodeJSONResponse(result.Body, &result.Code, w)
}
